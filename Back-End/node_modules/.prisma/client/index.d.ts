
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model adotante
 * 
 */
export type adotante = {
  cpf_adot: string
  rendafixa: adotante_rendafixa
  aceitacaoAnimal: adotante_aceitacaoAnimal
  animaisAtuais: string
  animaisAntigos: string
  descMoradores: string
  motivacao: string
}

/**
 * Model animais
 * 
 */
export type animais = {
  id_animal: number
  cnpj_pet: string
  especie: animais_especie
  sexo: animais_sexo
  porte: animais_porte
  idade: animais_idade
  pelagem: animais_pelagem
  cor: string
  deficiencia: string | null
  vacinas: string
  descricao: string | null
  foto: Buffer
}

/**
 * Model conta_banco_ong
 * 
 */
export type conta_banco_ong = {
  cnpj: string
  numConta: string
  agencia: string
  operacao: string | null
  pix: string
  qrcode: Buffer | null
}

/**
 * Model endereco_ong
 * 
 */
export type endereco_ong = {
  cnpj_end: string
  cep: string
  cidade: string
  bairro: string
  rua: string
  numero: string
}

/**
 * Model endereco_pessoas
 * 
 */
export type endereco_pessoas = {
  cpf_end: string
  cidade: string
  bairro: string
  rua: string
  numero: string
  tipoMoradia: string
}

/**
 * Model ong
 * 
 */
export type ong = {
  cnpj: string
  nome: string
  email: string
  senha: string
  facebook: string | null
  whatsapp: string | null
  descricao_ong: string
  foto: Buffer
}

/**
 * Model pessoas
 * 
 */
export type pessoas = {
  cpf: string
  nome: string
  email: string
  telefone: string
}

/**
 * Model voluntarios
 * 
 */
export type voluntarios = {
  cpf_vol: string
  disponibilidade: voluntarios_disponibilidade
  transporte: voluntarios_transporte
  funcao: voluntarios_funcao
}


/**
 * Enums
 */

export const adotante_aceitacaoAnimal: {
  Sim: 'Sim',
  N_o: 'N_o'
};

export type adotante_aceitacaoAnimal = (typeof adotante_aceitacaoAnimal)[keyof typeof adotante_aceitacaoAnimal]


export const adotante_rendafixa: {
  Sim: 'Sim',
  N_o: 'N_o'
};

export type adotante_rendafixa = (typeof adotante_rendafixa)[keyof typeof adotante_rendafixa]


export const animais_especie: {
  gato: 'gato',
  cachorro: 'cachorro'
};

export type animais_especie = (typeof animais_especie)[keyof typeof animais_especie]


export const animais_idade: {
  Filhote: 'Filhote',
  Adulto: 'Adulto',
  Idoso: 'Idoso'
};

export type animais_idade = (typeof animais_idade)[keyof typeof animais_idade]


export const animais_pelagem: {
  Curto: 'Curto',
  Longo: 'Longo'
};

export type animais_pelagem = (typeof animais_pelagem)[keyof typeof animais_pelagem]


export const animais_porte: {
  P: 'P',
  M: 'M',
  G: 'G'
};

export type animais_porte = (typeof animais_porte)[keyof typeof animais_porte]


export const animais_sexo: {
  F: 'F',
  M: 'M'
};

export type animais_sexo = (typeof animais_sexo)[keyof typeof animais_sexo]


export const voluntarios_disponibilidade: {
  Manh_: 'Manh_',
  Tarde: 'Tarde'
};

export type voluntarios_disponibilidade = (typeof voluntarios_disponibilidade)[keyof typeof voluntarios_disponibilidade]


export const voluntarios_funcao: {
  Limpeza: 'Limpeza',
  coleta: 'coleta',
  ajuda: 'ajuda'
};

export type voluntarios_funcao = (typeof voluntarios_funcao)[keyof typeof voluntarios_funcao]


export const voluntarios_transporte: {
  Sim: 'Sim',
  N_o: 'N_o'
};

export type voluntarios_transporte = (typeof voluntarios_transporte)[keyof typeof voluntarios_transporte]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Adotantes
 * const adotantes = await prisma.adotante.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Adotantes
   * const adotantes = await prisma.adotante.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.adotante`: Exposes CRUD operations for the **adotante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adotantes
    * const adotantes = await prisma.adotante.findMany()
    * ```
    */
  get adotante(): Prisma.adotanteDelegate<GlobalReject>;

  /**
   * `prisma.animais`: Exposes CRUD operations for the **animais** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Animais
    * const animais = await prisma.animais.findMany()
    * ```
    */
  get animais(): Prisma.animaisDelegate<GlobalReject>;

  /**
   * `prisma.conta_banco_ong`: Exposes CRUD operations for the **conta_banco_ong** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conta_banco_ongs
    * const conta_banco_ongs = await prisma.conta_banco_ong.findMany()
    * ```
    */
  get conta_banco_ong(): Prisma.conta_banco_ongDelegate<GlobalReject>;

  /**
   * `prisma.endereco_ong`: Exposes CRUD operations for the **endereco_ong** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Endereco_ongs
    * const endereco_ongs = await prisma.endereco_ong.findMany()
    * ```
    */
  get endereco_ong(): Prisma.endereco_ongDelegate<GlobalReject>;

  /**
   * `prisma.endereco_pessoas`: Exposes CRUD operations for the **endereco_pessoas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Endereco_pessoas
    * const endereco_pessoas = await prisma.endereco_pessoas.findMany()
    * ```
    */
  get endereco_pessoas(): Prisma.endereco_pessoasDelegate<GlobalReject>;

  /**
   * `prisma.ong`: Exposes CRUD operations for the **ong** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ongs
    * const ongs = await prisma.ong.findMany()
    * ```
    */
  get ong(): Prisma.ongDelegate<GlobalReject>;

  /**
   * `prisma.pessoas`: Exposes CRUD operations for the **pessoas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pessoas
    * const pessoas = await prisma.pessoas.findMany()
    * ```
    */
  get pessoas(): Prisma.pessoasDelegate<GlobalReject>;

  /**
   * `prisma.voluntarios`: Exposes CRUD operations for the **voluntarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Voluntarios
    * const voluntarios = await prisma.voluntarios.findMany()
    * ```
    */
  get voluntarios(): Prisma.voluntariosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    adotante: 'adotante',
    animais: 'animais',
    conta_banco_ong: 'conta_banco_ong',
    endereco_ong: 'endereco_ong',
    endereco_pessoas: 'endereco_pessoas',
    ong: 'ong',
    pessoas: 'pessoas',
    voluntarios: 'voluntarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OngCountOutputType
   */


  export type OngCountOutputType = {
    animais: number
  }

  export type OngCountOutputTypeSelect = {
    animais?: boolean
  }

  export type OngCountOutputTypeGetPayload<S extends boolean | null | undefined | OngCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OngCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OngCountOutputTypeArgs)
    ? OngCountOutputType 
    : S extends { select: any } & (OngCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OngCountOutputType ? OngCountOutputType[P] : never
  } 
      : OngCountOutputType




  // Custom InputTypes

  /**
   * OngCountOutputType without action
   */
  export type OngCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OngCountOutputType
     */
    select?: OngCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model adotante
   */


  export type AggregateAdotante = {
    _count: AdotanteCountAggregateOutputType | null
    _min: AdotanteMinAggregateOutputType | null
    _max: AdotanteMaxAggregateOutputType | null
  }

  export type AdotanteMinAggregateOutputType = {
    cpf_adot: string | null
    rendafixa: adotante_rendafixa | null
    aceitacaoAnimal: adotante_aceitacaoAnimal | null
    animaisAtuais: string | null
    animaisAntigos: string | null
    descMoradores: string | null
    motivacao: string | null
  }

  export type AdotanteMaxAggregateOutputType = {
    cpf_adot: string | null
    rendafixa: adotante_rendafixa | null
    aceitacaoAnimal: adotante_aceitacaoAnimal | null
    animaisAtuais: string | null
    animaisAntigos: string | null
    descMoradores: string | null
    motivacao: string | null
  }

  export type AdotanteCountAggregateOutputType = {
    cpf_adot: number
    rendafixa: number
    aceitacaoAnimal: number
    animaisAtuais: number
    animaisAntigos: number
    descMoradores: number
    motivacao: number
    _all: number
  }


  export type AdotanteMinAggregateInputType = {
    cpf_adot?: true
    rendafixa?: true
    aceitacaoAnimal?: true
    animaisAtuais?: true
    animaisAntigos?: true
    descMoradores?: true
    motivacao?: true
  }

  export type AdotanteMaxAggregateInputType = {
    cpf_adot?: true
    rendafixa?: true
    aceitacaoAnimal?: true
    animaisAtuais?: true
    animaisAntigos?: true
    descMoradores?: true
    motivacao?: true
  }

  export type AdotanteCountAggregateInputType = {
    cpf_adot?: true
    rendafixa?: true
    aceitacaoAnimal?: true
    animaisAtuais?: true
    animaisAntigos?: true
    descMoradores?: true
    motivacao?: true
    _all?: true
  }

  export type AdotanteAggregateArgs = {
    /**
     * Filter which adotante to aggregate.
     */
    where?: adotanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adotantes to fetch.
     */
    orderBy?: Enumerable<adotanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adotanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adotantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adotantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned adotantes
    **/
    _count?: true | AdotanteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdotanteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdotanteMaxAggregateInputType
  }

  export type GetAdotanteAggregateType<T extends AdotanteAggregateArgs> = {
        [P in keyof T & keyof AggregateAdotante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdotante[P]>
      : GetScalarType<T[P], AggregateAdotante[P]>
  }




  export type AdotanteGroupByArgs = {
    where?: adotanteWhereInput
    orderBy?: Enumerable<adotanteOrderByWithAggregationInput>
    by: AdotanteScalarFieldEnum[]
    having?: adotanteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdotanteCountAggregateInputType | true
    _min?: AdotanteMinAggregateInputType
    _max?: AdotanteMaxAggregateInputType
  }


  export type AdotanteGroupByOutputType = {
    cpf_adot: string
    rendafixa: adotante_rendafixa
    aceitacaoAnimal: adotante_aceitacaoAnimal
    animaisAtuais: string
    animaisAntigos: string
    descMoradores: string
    motivacao: string
    _count: AdotanteCountAggregateOutputType | null
    _min: AdotanteMinAggregateOutputType | null
    _max: AdotanteMaxAggregateOutputType | null
  }

  type GetAdotanteGroupByPayload<T extends AdotanteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdotanteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdotanteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdotanteGroupByOutputType[P]>
            : GetScalarType<T[P], AdotanteGroupByOutputType[P]>
        }
      >
    >


  export type adotanteSelect = {
    cpf_adot?: boolean
    rendafixa?: boolean
    aceitacaoAnimal?: boolean
    animaisAtuais?: boolean
    animaisAntigos?: boolean
    descMoradores?: boolean
    motivacao?: boolean
    pessoas?: boolean | pessoasArgs
  }


  export type adotanteInclude = {
    pessoas?: boolean | pessoasArgs
  }

  export type adotanteGetPayload<S extends boolean | null | undefined | adotanteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? adotante :
    S extends undefined ? never :
    S extends { include: any } & (adotanteArgs | adotanteFindManyArgs)
    ? adotante  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pessoas' ? pessoasGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (adotanteArgs | adotanteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pessoas' ? pessoasGetPayload<S['select'][P]> :  P extends keyof adotante ? adotante[P] : never
  } 
      : adotante


  type adotanteCountArgs = 
    Omit<adotanteFindManyArgs, 'select' | 'include'> & {
      select?: AdotanteCountAggregateInputType | true
    }

  export interface adotanteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Adotante that matches the filter.
     * @param {adotanteFindUniqueArgs} args - Arguments to find a Adotante
     * @example
     * // Get one Adotante
     * const adotante = await prisma.adotante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends adotanteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, adotanteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'adotante'> extends True ? Prisma__adotanteClient<adotanteGetPayload<T>> : Prisma__adotanteClient<adotanteGetPayload<T> | null, null>

    /**
     * Find one Adotante that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {adotanteFindUniqueOrThrowArgs} args - Arguments to find a Adotante
     * @example
     * // Get one Adotante
     * const adotante = await prisma.adotante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends adotanteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, adotanteFindUniqueOrThrowArgs>
    ): Prisma__adotanteClient<adotanteGetPayload<T>>

    /**
     * Find the first Adotante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotanteFindFirstArgs} args - Arguments to find a Adotante
     * @example
     * // Get one Adotante
     * const adotante = await prisma.adotante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends adotanteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, adotanteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'adotante'> extends True ? Prisma__adotanteClient<adotanteGetPayload<T>> : Prisma__adotanteClient<adotanteGetPayload<T> | null, null>

    /**
     * Find the first Adotante that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotanteFindFirstOrThrowArgs} args - Arguments to find a Adotante
     * @example
     * // Get one Adotante
     * const adotante = await prisma.adotante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends adotanteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, adotanteFindFirstOrThrowArgs>
    ): Prisma__adotanteClient<adotanteGetPayload<T>>

    /**
     * Find zero or more Adotantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotanteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adotantes
     * const adotantes = await prisma.adotante.findMany()
     * 
     * // Get first 10 Adotantes
     * const adotantes = await prisma.adotante.findMany({ take: 10 })
     * 
     * // Only select the `cpf_adot`
     * const adotanteWithCpf_adotOnly = await prisma.adotante.findMany({ select: { cpf_adot: true } })
     * 
    **/
    findMany<T extends adotanteFindManyArgs>(
      args?: SelectSubset<T, adotanteFindManyArgs>
    ): Prisma.PrismaPromise<Array<adotanteGetPayload<T>>>

    /**
     * Create a Adotante.
     * @param {adotanteCreateArgs} args - Arguments to create a Adotante.
     * @example
     * // Create one Adotante
     * const Adotante = await prisma.adotante.create({
     *   data: {
     *     // ... data to create a Adotante
     *   }
     * })
     * 
    **/
    create<T extends adotanteCreateArgs>(
      args: SelectSubset<T, adotanteCreateArgs>
    ): Prisma__adotanteClient<adotanteGetPayload<T>>

    /**
     * Create many Adotantes.
     *     @param {adotanteCreateManyArgs} args - Arguments to create many Adotantes.
     *     @example
     *     // Create many Adotantes
     *     const adotante = await prisma.adotante.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends adotanteCreateManyArgs>(
      args?: SelectSubset<T, adotanteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Adotante.
     * @param {adotanteDeleteArgs} args - Arguments to delete one Adotante.
     * @example
     * // Delete one Adotante
     * const Adotante = await prisma.adotante.delete({
     *   where: {
     *     // ... filter to delete one Adotante
     *   }
     * })
     * 
    **/
    delete<T extends adotanteDeleteArgs>(
      args: SelectSubset<T, adotanteDeleteArgs>
    ): Prisma__adotanteClient<adotanteGetPayload<T>>

    /**
     * Update one Adotante.
     * @param {adotanteUpdateArgs} args - Arguments to update one Adotante.
     * @example
     * // Update one Adotante
     * const adotante = await prisma.adotante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends adotanteUpdateArgs>(
      args: SelectSubset<T, adotanteUpdateArgs>
    ): Prisma__adotanteClient<adotanteGetPayload<T>>

    /**
     * Delete zero or more Adotantes.
     * @param {adotanteDeleteManyArgs} args - Arguments to filter Adotantes to delete.
     * @example
     * // Delete a few Adotantes
     * const { count } = await prisma.adotante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends adotanteDeleteManyArgs>(
      args?: SelectSubset<T, adotanteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adotantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotanteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adotantes
     * const adotante = await prisma.adotante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends adotanteUpdateManyArgs>(
      args: SelectSubset<T, adotanteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Adotante.
     * @param {adotanteUpsertArgs} args - Arguments to update or create a Adotante.
     * @example
     * // Update or create a Adotante
     * const adotante = await prisma.adotante.upsert({
     *   create: {
     *     // ... data to create a Adotante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adotante we want to update
     *   }
     * })
    **/
    upsert<T extends adotanteUpsertArgs>(
      args: SelectSubset<T, adotanteUpsertArgs>
    ): Prisma__adotanteClient<adotanteGetPayload<T>>

    /**
     * Count the number of Adotantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adotanteCountArgs} args - Arguments to filter Adotantes to count.
     * @example
     * // Count the number of Adotantes
     * const count = await prisma.adotante.count({
     *   where: {
     *     // ... the filter for the Adotantes we want to count
     *   }
     * })
    **/
    count<T extends adotanteCountArgs>(
      args?: Subset<T, adotanteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdotanteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adotante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdotanteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdotanteAggregateArgs>(args: Subset<T, AdotanteAggregateArgs>): Prisma.PrismaPromise<GetAdotanteAggregateType<T>>

    /**
     * Group by Adotante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdotanteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdotanteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdotanteGroupByArgs['orderBy'] }
        : { orderBy?: AdotanteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdotanteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdotanteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for adotante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__adotanteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pessoas<T extends pessoasArgs= {}>(args?: Subset<T, pessoasArgs>): Prisma__pessoasClient<pessoasGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * adotante base type for findUnique actions
   */
  export type adotanteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * Filter, which adotante to fetch.
     */
    where: adotanteWhereUniqueInput
  }

  /**
   * adotante findUnique
   */
  export interface adotanteFindUniqueArgs extends adotanteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * adotante findUniqueOrThrow
   */
  export type adotanteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * Filter, which adotante to fetch.
     */
    where: adotanteWhereUniqueInput
  }


  /**
   * adotante base type for findFirst actions
   */
  export type adotanteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * Filter, which adotante to fetch.
     */
    where?: adotanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adotantes to fetch.
     */
    orderBy?: Enumerable<adotanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adotantes.
     */
    cursor?: adotanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adotantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adotantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adotantes.
     */
    distinct?: Enumerable<AdotanteScalarFieldEnum>
  }

  /**
   * adotante findFirst
   */
  export interface adotanteFindFirstArgs extends adotanteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * adotante findFirstOrThrow
   */
  export type adotanteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * Filter, which adotante to fetch.
     */
    where?: adotanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adotantes to fetch.
     */
    orderBy?: Enumerable<adotanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adotantes.
     */
    cursor?: adotanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adotantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adotantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adotantes.
     */
    distinct?: Enumerable<AdotanteScalarFieldEnum>
  }


  /**
   * adotante findMany
   */
  export type adotanteFindManyArgs = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * Filter, which adotantes to fetch.
     */
    where?: adotanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adotantes to fetch.
     */
    orderBy?: Enumerable<adotanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing adotantes.
     */
    cursor?: adotanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adotantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adotantes.
     */
    skip?: number
    distinct?: Enumerable<AdotanteScalarFieldEnum>
  }


  /**
   * adotante create
   */
  export type adotanteCreateArgs = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * The data needed to create a adotante.
     */
    data: XOR<adotanteCreateInput, adotanteUncheckedCreateInput>
  }


  /**
   * adotante createMany
   */
  export type adotanteCreateManyArgs = {
    /**
     * The data used to create many adotantes.
     */
    data: Enumerable<adotanteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * adotante update
   */
  export type adotanteUpdateArgs = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * The data needed to update a adotante.
     */
    data: XOR<adotanteUpdateInput, adotanteUncheckedUpdateInput>
    /**
     * Choose, which adotante to update.
     */
    where: adotanteWhereUniqueInput
  }


  /**
   * adotante updateMany
   */
  export type adotanteUpdateManyArgs = {
    /**
     * The data used to update adotantes.
     */
    data: XOR<adotanteUpdateManyMutationInput, adotanteUncheckedUpdateManyInput>
    /**
     * Filter which adotantes to update
     */
    where?: adotanteWhereInput
  }


  /**
   * adotante upsert
   */
  export type adotanteUpsertArgs = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * The filter to search for the adotante to update in case it exists.
     */
    where: adotanteWhereUniqueInput
    /**
     * In case the adotante found by the `where` argument doesn't exist, create a new adotante with this data.
     */
    create: XOR<adotanteCreateInput, adotanteUncheckedCreateInput>
    /**
     * In case the adotante was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adotanteUpdateInput, adotanteUncheckedUpdateInput>
  }


  /**
   * adotante delete
   */
  export type adotanteDeleteArgs = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
    /**
     * Filter which adotante to delete.
     */
    where: adotanteWhereUniqueInput
  }


  /**
   * adotante deleteMany
   */
  export type adotanteDeleteManyArgs = {
    /**
     * Filter which adotantes to delete
     */
    where?: adotanteWhereInput
  }


  /**
   * adotante without action
   */
  export type adotanteArgs = {
    /**
     * Select specific fields to fetch from the adotante
     */
    select?: adotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: adotanteInclude | null
  }



  /**
   * Model animais
   */


  export type AggregateAnimais = {
    _count: AnimaisCountAggregateOutputType | null
    _avg: AnimaisAvgAggregateOutputType | null
    _sum: AnimaisSumAggregateOutputType | null
    _min: AnimaisMinAggregateOutputType | null
    _max: AnimaisMaxAggregateOutputType | null
  }

  export type AnimaisAvgAggregateOutputType = {
    id_animal: number | null
  }

  export type AnimaisSumAggregateOutputType = {
    id_animal: number | null
  }

  export type AnimaisMinAggregateOutputType = {
    id_animal: number | null
    cnpj_pet: string | null
    especie: animais_especie | null
    sexo: animais_sexo | null
    porte: animais_porte | null
    idade: animais_idade | null
    pelagem: animais_pelagem | null
    cor: string | null
    deficiencia: string | null
    vacinas: string | null
    descricao: string | null
    foto: Buffer | null
  }

  export type AnimaisMaxAggregateOutputType = {
    id_animal: number | null
    cnpj_pet: string | null
    especie: animais_especie | null
    sexo: animais_sexo | null
    porte: animais_porte | null
    idade: animais_idade | null
    pelagem: animais_pelagem | null
    cor: string | null
    deficiencia: string | null
    vacinas: string | null
    descricao: string | null
    foto: Buffer | null
  }

  export type AnimaisCountAggregateOutputType = {
    id_animal: number
    cnpj_pet: number
    especie: number
    sexo: number
    porte: number
    idade: number
    pelagem: number
    cor: number
    deficiencia: number
    vacinas: number
    descricao: number
    foto: number
    _all: number
  }


  export type AnimaisAvgAggregateInputType = {
    id_animal?: true
  }

  export type AnimaisSumAggregateInputType = {
    id_animal?: true
  }

  export type AnimaisMinAggregateInputType = {
    id_animal?: true
    cnpj_pet?: true
    especie?: true
    sexo?: true
    porte?: true
    idade?: true
    pelagem?: true
    cor?: true
    deficiencia?: true
    vacinas?: true
    descricao?: true
    foto?: true
  }

  export type AnimaisMaxAggregateInputType = {
    id_animal?: true
    cnpj_pet?: true
    especie?: true
    sexo?: true
    porte?: true
    idade?: true
    pelagem?: true
    cor?: true
    deficiencia?: true
    vacinas?: true
    descricao?: true
    foto?: true
  }

  export type AnimaisCountAggregateInputType = {
    id_animal?: true
    cnpj_pet?: true
    especie?: true
    sexo?: true
    porte?: true
    idade?: true
    pelagem?: true
    cor?: true
    deficiencia?: true
    vacinas?: true
    descricao?: true
    foto?: true
    _all?: true
  }

  export type AnimaisAggregateArgs = {
    /**
     * Filter which animais to aggregate.
     */
    where?: animaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of animais to fetch.
     */
    orderBy?: Enumerable<animaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: animaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` animais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` animais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned animais
    **/
    _count?: true | AnimaisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimaisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimaisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimaisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimaisMaxAggregateInputType
  }

  export type GetAnimaisAggregateType<T extends AnimaisAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimais]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimais[P]>
      : GetScalarType<T[P], AggregateAnimais[P]>
  }




  export type AnimaisGroupByArgs = {
    where?: animaisWhereInput
    orderBy?: Enumerable<animaisOrderByWithAggregationInput>
    by: AnimaisScalarFieldEnum[]
    having?: animaisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimaisCountAggregateInputType | true
    _avg?: AnimaisAvgAggregateInputType
    _sum?: AnimaisSumAggregateInputType
    _min?: AnimaisMinAggregateInputType
    _max?: AnimaisMaxAggregateInputType
  }


  export type AnimaisGroupByOutputType = {
    id_animal: number
    cnpj_pet: string
    especie: animais_especie
    sexo: animais_sexo
    porte: animais_porte
    idade: animais_idade
    pelagem: animais_pelagem
    cor: string
    deficiencia: string | null
    vacinas: string
    descricao: string | null
    foto: Buffer
    _count: AnimaisCountAggregateOutputType | null
    _avg: AnimaisAvgAggregateOutputType | null
    _sum: AnimaisSumAggregateOutputType | null
    _min: AnimaisMinAggregateOutputType | null
    _max: AnimaisMaxAggregateOutputType | null
  }

  type GetAnimaisGroupByPayload<T extends AnimaisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AnimaisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimaisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimaisGroupByOutputType[P]>
            : GetScalarType<T[P], AnimaisGroupByOutputType[P]>
        }
      >
    >


  export type animaisSelect = {
    id_animal?: boolean
    cnpj_pet?: boolean
    especie?: boolean
    sexo?: boolean
    porte?: boolean
    idade?: boolean
    pelagem?: boolean
    cor?: boolean
    deficiencia?: boolean
    vacinas?: boolean
    descricao?: boolean
    foto?: boolean
    ong?: boolean | ongArgs
  }


  export type animaisInclude = {
    ong?: boolean | ongArgs
  }

  export type animaisGetPayload<S extends boolean | null | undefined | animaisArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? animais :
    S extends undefined ? never :
    S extends { include: any } & (animaisArgs | animaisFindManyArgs)
    ? animais  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ong' ? ongGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (animaisArgs | animaisFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ong' ? ongGetPayload<S['select'][P]> :  P extends keyof animais ? animais[P] : never
  } 
      : animais


  type animaisCountArgs = 
    Omit<animaisFindManyArgs, 'select' | 'include'> & {
      select?: AnimaisCountAggregateInputType | true
    }

  export interface animaisDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Animais that matches the filter.
     * @param {animaisFindUniqueArgs} args - Arguments to find a Animais
     * @example
     * // Get one Animais
     * const animais = await prisma.animais.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends animaisFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, animaisFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'animais'> extends True ? Prisma__animaisClient<animaisGetPayload<T>> : Prisma__animaisClient<animaisGetPayload<T> | null, null>

    /**
     * Find one Animais that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {animaisFindUniqueOrThrowArgs} args - Arguments to find a Animais
     * @example
     * // Get one Animais
     * const animais = await prisma.animais.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends animaisFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, animaisFindUniqueOrThrowArgs>
    ): Prisma__animaisClient<animaisGetPayload<T>>

    /**
     * Find the first Animais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {animaisFindFirstArgs} args - Arguments to find a Animais
     * @example
     * // Get one Animais
     * const animais = await prisma.animais.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends animaisFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, animaisFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'animais'> extends True ? Prisma__animaisClient<animaisGetPayload<T>> : Prisma__animaisClient<animaisGetPayload<T> | null, null>

    /**
     * Find the first Animais that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {animaisFindFirstOrThrowArgs} args - Arguments to find a Animais
     * @example
     * // Get one Animais
     * const animais = await prisma.animais.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends animaisFindFirstOrThrowArgs>(
      args?: SelectSubset<T, animaisFindFirstOrThrowArgs>
    ): Prisma__animaisClient<animaisGetPayload<T>>

    /**
     * Find zero or more Animais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {animaisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Animais
     * const animais = await prisma.animais.findMany()
     * 
     * // Get first 10 Animais
     * const animais = await prisma.animais.findMany({ take: 10 })
     * 
     * // Only select the `id_animal`
     * const animaisWithId_animalOnly = await prisma.animais.findMany({ select: { id_animal: true } })
     * 
    **/
    findMany<T extends animaisFindManyArgs>(
      args?: SelectSubset<T, animaisFindManyArgs>
    ): Prisma.PrismaPromise<Array<animaisGetPayload<T>>>

    /**
     * Create a Animais.
     * @param {animaisCreateArgs} args - Arguments to create a Animais.
     * @example
     * // Create one Animais
     * const Animais = await prisma.animais.create({
     *   data: {
     *     // ... data to create a Animais
     *   }
     * })
     * 
    **/
    create<T extends animaisCreateArgs>(
      args: SelectSubset<T, animaisCreateArgs>
    ): Prisma__animaisClient<animaisGetPayload<T>>

    /**
     * Create many Animais.
     *     @param {animaisCreateManyArgs} args - Arguments to create many Animais.
     *     @example
     *     // Create many Animais
     *     const animais = await prisma.animais.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends animaisCreateManyArgs>(
      args?: SelectSubset<T, animaisCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Animais.
     * @param {animaisDeleteArgs} args - Arguments to delete one Animais.
     * @example
     * // Delete one Animais
     * const Animais = await prisma.animais.delete({
     *   where: {
     *     // ... filter to delete one Animais
     *   }
     * })
     * 
    **/
    delete<T extends animaisDeleteArgs>(
      args: SelectSubset<T, animaisDeleteArgs>
    ): Prisma__animaisClient<animaisGetPayload<T>>

    /**
     * Update one Animais.
     * @param {animaisUpdateArgs} args - Arguments to update one Animais.
     * @example
     * // Update one Animais
     * const animais = await prisma.animais.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends animaisUpdateArgs>(
      args: SelectSubset<T, animaisUpdateArgs>
    ): Prisma__animaisClient<animaisGetPayload<T>>

    /**
     * Delete zero or more Animais.
     * @param {animaisDeleteManyArgs} args - Arguments to filter Animais to delete.
     * @example
     * // Delete a few Animais
     * const { count } = await prisma.animais.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends animaisDeleteManyArgs>(
      args?: SelectSubset<T, animaisDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Animais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {animaisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Animais
     * const animais = await prisma.animais.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends animaisUpdateManyArgs>(
      args: SelectSubset<T, animaisUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Animais.
     * @param {animaisUpsertArgs} args - Arguments to update or create a Animais.
     * @example
     * // Update or create a Animais
     * const animais = await prisma.animais.upsert({
     *   create: {
     *     // ... data to create a Animais
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Animais we want to update
     *   }
     * })
    **/
    upsert<T extends animaisUpsertArgs>(
      args: SelectSubset<T, animaisUpsertArgs>
    ): Prisma__animaisClient<animaisGetPayload<T>>

    /**
     * Count the number of Animais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {animaisCountArgs} args - Arguments to filter Animais to count.
     * @example
     * // Count the number of Animais
     * const count = await prisma.animais.count({
     *   where: {
     *     // ... the filter for the Animais we want to count
     *   }
     * })
    **/
    count<T extends animaisCountArgs>(
      args?: Subset<T, animaisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimaisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Animais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimaisAggregateArgs>(args: Subset<T, AnimaisAggregateArgs>): Prisma.PrismaPromise<GetAnimaisAggregateType<T>>

    /**
     * Group by Animais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimaisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimaisGroupByArgs['orderBy'] }
        : { orderBy?: AnimaisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimaisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimaisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for animais.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__animaisClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ong<T extends ongArgs= {}>(args?: Subset<T, ongArgs>): Prisma__ongClient<ongGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * animais base type for findUnique actions
   */
  export type animaisFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * Filter, which animais to fetch.
     */
    where: animaisWhereUniqueInput
  }

  /**
   * animais findUnique
   */
  export interface animaisFindUniqueArgs extends animaisFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * animais findUniqueOrThrow
   */
  export type animaisFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * Filter, which animais to fetch.
     */
    where: animaisWhereUniqueInput
  }


  /**
   * animais base type for findFirst actions
   */
  export type animaisFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * Filter, which animais to fetch.
     */
    where?: animaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of animais to fetch.
     */
    orderBy?: Enumerable<animaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for animais.
     */
    cursor?: animaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` animais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` animais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of animais.
     */
    distinct?: Enumerable<AnimaisScalarFieldEnum>
  }

  /**
   * animais findFirst
   */
  export interface animaisFindFirstArgs extends animaisFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * animais findFirstOrThrow
   */
  export type animaisFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * Filter, which animais to fetch.
     */
    where?: animaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of animais to fetch.
     */
    orderBy?: Enumerable<animaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for animais.
     */
    cursor?: animaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` animais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` animais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of animais.
     */
    distinct?: Enumerable<AnimaisScalarFieldEnum>
  }


  /**
   * animais findMany
   */
  export type animaisFindManyArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * Filter, which animais to fetch.
     */
    where?: animaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of animais to fetch.
     */
    orderBy?: Enumerable<animaisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing animais.
     */
    cursor?: animaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` animais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` animais.
     */
    skip?: number
    distinct?: Enumerable<AnimaisScalarFieldEnum>
  }


  /**
   * animais create
   */
  export type animaisCreateArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * The data needed to create a animais.
     */
    data: XOR<animaisCreateInput, animaisUncheckedCreateInput>
  }


  /**
   * animais createMany
   */
  export type animaisCreateManyArgs = {
    /**
     * The data used to create many animais.
     */
    data: Enumerable<animaisCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * animais update
   */
  export type animaisUpdateArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * The data needed to update a animais.
     */
    data: XOR<animaisUpdateInput, animaisUncheckedUpdateInput>
    /**
     * Choose, which animais to update.
     */
    where: animaisWhereUniqueInput
  }


  /**
   * animais updateMany
   */
  export type animaisUpdateManyArgs = {
    /**
     * The data used to update animais.
     */
    data: XOR<animaisUpdateManyMutationInput, animaisUncheckedUpdateManyInput>
    /**
     * Filter which animais to update
     */
    where?: animaisWhereInput
  }


  /**
   * animais upsert
   */
  export type animaisUpsertArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * The filter to search for the animais to update in case it exists.
     */
    where: animaisWhereUniqueInput
    /**
     * In case the animais found by the `where` argument doesn't exist, create a new animais with this data.
     */
    create: XOR<animaisCreateInput, animaisUncheckedCreateInput>
    /**
     * In case the animais was found with the provided `where` argument, update it with this data.
     */
    update: XOR<animaisUpdateInput, animaisUncheckedUpdateInput>
  }


  /**
   * animais delete
   */
  export type animaisDeleteArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    /**
     * Filter which animais to delete.
     */
    where: animaisWhereUniqueInput
  }


  /**
   * animais deleteMany
   */
  export type animaisDeleteManyArgs = {
    /**
     * Filter which animais to delete
     */
    where?: animaisWhereInput
  }


  /**
   * animais without action
   */
  export type animaisArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
  }



  /**
   * Model conta_banco_ong
   */


  export type AggregateConta_banco_ong = {
    _count: Conta_banco_ongCountAggregateOutputType | null
    _min: Conta_banco_ongMinAggregateOutputType | null
    _max: Conta_banco_ongMaxAggregateOutputType | null
  }

  export type Conta_banco_ongMinAggregateOutputType = {
    cnpj: string | null
    numConta: string | null
    agencia: string | null
    operacao: string | null
    pix: string | null
    qrcode: Buffer | null
  }

  export type Conta_banco_ongMaxAggregateOutputType = {
    cnpj: string | null
    numConta: string | null
    agencia: string | null
    operacao: string | null
    pix: string | null
    qrcode: Buffer | null
  }

  export type Conta_banco_ongCountAggregateOutputType = {
    cnpj: number
    numConta: number
    agencia: number
    operacao: number
    pix: number
    qrcode: number
    _all: number
  }


  export type Conta_banco_ongMinAggregateInputType = {
    cnpj?: true
    numConta?: true
    agencia?: true
    operacao?: true
    pix?: true
    qrcode?: true
  }

  export type Conta_banco_ongMaxAggregateInputType = {
    cnpj?: true
    numConta?: true
    agencia?: true
    operacao?: true
    pix?: true
    qrcode?: true
  }

  export type Conta_banco_ongCountAggregateInputType = {
    cnpj?: true
    numConta?: true
    agencia?: true
    operacao?: true
    pix?: true
    qrcode?: true
    _all?: true
  }

  export type Conta_banco_ongAggregateArgs = {
    /**
     * Filter which conta_banco_ong to aggregate.
     */
    where?: conta_banco_ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of conta_banco_ongs to fetch.
     */
    orderBy?: Enumerable<conta_banco_ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: conta_banco_ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` conta_banco_ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` conta_banco_ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned conta_banco_ongs
    **/
    _count?: true | Conta_banco_ongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Conta_banco_ongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Conta_banco_ongMaxAggregateInputType
  }

  export type GetConta_banco_ongAggregateType<T extends Conta_banco_ongAggregateArgs> = {
        [P in keyof T & keyof AggregateConta_banco_ong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConta_banco_ong[P]>
      : GetScalarType<T[P], AggregateConta_banco_ong[P]>
  }




  export type Conta_banco_ongGroupByArgs = {
    where?: conta_banco_ongWhereInput
    orderBy?: Enumerable<conta_banco_ongOrderByWithAggregationInput>
    by: Conta_banco_ongScalarFieldEnum[]
    having?: conta_banco_ongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Conta_banco_ongCountAggregateInputType | true
    _min?: Conta_banco_ongMinAggregateInputType
    _max?: Conta_banco_ongMaxAggregateInputType
  }


  export type Conta_banco_ongGroupByOutputType = {
    cnpj: string
    numConta: string
    agencia: string
    operacao: string | null
    pix: string
    qrcode: Buffer | null
    _count: Conta_banco_ongCountAggregateOutputType | null
    _min: Conta_banco_ongMinAggregateOutputType | null
    _max: Conta_banco_ongMaxAggregateOutputType | null
  }

  type GetConta_banco_ongGroupByPayload<T extends Conta_banco_ongGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Conta_banco_ongGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Conta_banco_ongGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Conta_banco_ongGroupByOutputType[P]>
            : GetScalarType<T[P], Conta_banco_ongGroupByOutputType[P]>
        }
      >
    >


  export type conta_banco_ongSelect = {
    cnpj?: boolean
    numConta?: boolean
    agencia?: boolean
    operacao?: boolean
    pix?: boolean
    qrcode?: boolean
    ong?: boolean | ongArgs
  }


  export type conta_banco_ongInclude = {
    ong?: boolean | ongArgs
  }

  export type conta_banco_ongGetPayload<S extends boolean | null | undefined | conta_banco_ongArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? conta_banco_ong :
    S extends undefined ? never :
    S extends { include: any } & (conta_banco_ongArgs | conta_banco_ongFindManyArgs)
    ? conta_banco_ong  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ong' ? ongGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (conta_banco_ongArgs | conta_banco_ongFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ong' ? ongGetPayload<S['select'][P]> :  P extends keyof conta_banco_ong ? conta_banco_ong[P] : never
  } 
      : conta_banco_ong


  type conta_banco_ongCountArgs = 
    Omit<conta_banco_ongFindManyArgs, 'select' | 'include'> & {
      select?: Conta_banco_ongCountAggregateInputType | true
    }

  export interface conta_banco_ongDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Conta_banco_ong that matches the filter.
     * @param {conta_banco_ongFindUniqueArgs} args - Arguments to find a Conta_banco_ong
     * @example
     * // Get one Conta_banco_ong
     * const conta_banco_ong = await prisma.conta_banco_ong.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends conta_banco_ongFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, conta_banco_ongFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'conta_banco_ong'> extends True ? Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T>> : Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T> | null, null>

    /**
     * Find one Conta_banco_ong that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {conta_banco_ongFindUniqueOrThrowArgs} args - Arguments to find a Conta_banco_ong
     * @example
     * // Get one Conta_banco_ong
     * const conta_banco_ong = await prisma.conta_banco_ong.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends conta_banco_ongFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, conta_banco_ongFindUniqueOrThrowArgs>
    ): Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T>>

    /**
     * Find the first Conta_banco_ong that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conta_banco_ongFindFirstArgs} args - Arguments to find a Conta_banco_ong
     * @example
     * // Get one Conta_banco_ong
     * const conta_banco_ong = await prisma.conta_banco_ong.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends conta_banco_ongFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, conta_banco_ongFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'conta_banco_ong'> extends True ? Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T>> : Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T> | null, null>

    /**
     * Find the first Conta_banco_ong that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conta_banco_ongFindFirstOrThrowArgs} args - Arguments to find a Conta_banco_ong
     * @example
     * // Get one Conta_banco_ong
     * const conta_banco_ong = await prisma.conta_banco_ong.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends conta_banco_ongFindFirstOrThrowArgs>(
      args?: SelectSubset<T, conta_banco_ongFindFirstOrThrowArgs>
    ): Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T>>

    /**
     * Find zero or more Conta_banco_ongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conta_banco_ongFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conta_banco_ongs
     * const conta_banco_ongs = await prisma.conta_banco_ong.findMany()
     * 
     * // Get first 10 Conta_banco_ongs
     * const conta_banco_ongs = await prisma.conta_banco_ong.findMany({ take: 10 })
     * 
     * // Only select the `cnpj`
     * const conta_banco_ongWithCnpjOnly = await prisma.conta_banco_ong.findMany({ select: { cnpj: true } })
     * 
    **/
    findMany<T extends conta_banco_ongFindManyArgs>(
      args?: SelectSubset<T, conta_banco_ongFindManyArgs>
    ): Prisma.PrismaPromise<Array<conta_banco_ongGetPayload<T>>>

    /**
     * Create a Conta_banco_ong.
     * @param {conta_banco_ongCreateArgs} args - Arguments to create a Conta_banco_ong.
     * @example
     * // Create one Conta_banco_ong
     * const Conta_banco_ong = await prisma.conta_banco_ong.create({
     *   data: {
     *     // ... data to create a Conta_banco_ong
     *   }
     * })
     * 
    **/
    create<T extends conta_banco_ongCreateArgs>(
      args: SelectSubset<T, conta_banco_ongCreateArgs>
    ): Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T>>

    /**
     * Create many Conta_banco_ongs.
     *     @param {conta_banco_ongCreateManyArgs} args - Arguments to create many Conta_banco_ongs.
     *     @example
     *     // Create many Conta_banco_ongs
     *     const conta_banco_ong = await prisma.conta_banco_ong.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends conta_banco_ongCreateManyArgs>(
      args?: SelectSubset<T, conta_banco_ongCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Conta_banco_ong.
     * @param {conta_banco_ongDeleteArgs} args - Arguments to delete one Conta_banco_ong.
     * @example
     * // Delete one Conta_banco_ong
     * const Conta_banco_ong = await prisma.conta_banco_ong.delete({
     *   where: {
     *     // ... filter to delete one Conta_banco_ong
     *   }
     * })
     * 
    **/
    delete<T extends conta_banco_ongDeleteArgs>(
      args: SelectSubset<T, conta_banco_ongDeleteArgs>
    ): Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T>>

    /**
     * Update one Conta_banco_ong.
     * @param {conta_banco_ongUpdateArgs} args - Arguments to update one Conta_banco_ong.
     * @example
     * // Update one Conta_banco_ong
     * const conta_banco_ong = await prisma.conta_banco_ong.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends conta_banco_ongUpdateArgs>(
      args: SelectSubset<T, conta_banco_ongUpdateArgs>
    ): Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T>>

    /**
     * Delete zero or more Conta_banco_ongs.
     * @param {conta_banco_ongDeleteManyArgs} args - Arguments to filter Conta_banco_ongs to delete.
     * @example
     * // Delete a few Conta_banco_ongs
     * const { count } = await prisma.conta_banco_ong.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends conta_banco_ongDeleteManyArgs>(
      args?: SelectSubset<T, conta_banco_ongDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conta_banco_ongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conta_banco_ongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conta_banco_ongs
     * const conta_banco_ong = await prisma.conta_banco_ong.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends conta_banco_ongUpdateManyArgs>(
      args: SelectSubset<T, conta_banco_ongUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conta_banco_ong.
     * @param {conta_banco_ongUpsertArgs} args - Arguments to update or create a Conta_banco_ong.
     * @example
     * // Update or create a Conta_banco_ong
     * const conta_banco_ong = await prisma.conta_banco_ong.upsert({
     *   create: {
     *     // ... data to create a Conta_banco_ong
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conta_banco_ong we want to update
     *   }
     * })
    **/
    upsert<T extends conta_banco_ongUpsertArgs>(
      args: SelectSubset<T, conta_banco_ongUpsertArgs>
    ): Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T>>

    /**
     * Count the number of Conta_banco_ongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conta_banco_ongCountArgs} args - Arguments to filter Conta_banco_ongs to count.
     * @example
     * // Count the number of Conta_banco_ongs
     * const count = await prisma.conta_banco_ong.count({
     *   where: {
     *     // ... the filter for the Conta_banco_ongs we want to count
     *   }
     * })
    **/
    count<T extends conta_banco_ongCountArgs>(
      args?: Subset<T, conta_banco_ongCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Conta_banco_ongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conta_banco_ong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Conta_banco_ongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Conta_banco_ongAggregateArgs>(args: Subset<T, Conta_banco_ongAggregateArgs>): Prisma.PrismaPromise<GetConta_banco_ongAggregateType<T>>

    /**
     * Group by Conta_banco_ong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Conta_banco_ongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Conta_banco_ongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Conta_banco_ongGroupByArgs['orderBy'] }
        : { orderBy?: Conta_banco_ongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Conta_banco_ongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConta_banco_ongGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for conta_banco_ong.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__conta_banco_ongClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ong<T extends ongArgs= {}>(args?: Subset<T, ongArgs>): Prisma__ongClient<ongGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * conta_banco_ong base type for findUnique actions
   */
  export type conta_banco_ongFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * Filter, which conta_banco_ong to fetch.
     */
    where: conta_banco_ongWhereUniqueInput
  }

  /**
   * conta_banco_ong findUnique
   */
  export interface conta_banco_ongFindUniqueArgs extends conta_banco_ongFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * conta_banco_ong findUniqueOrThrow
   */
  export type conta_banco_ongFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * Filter, which conta_banco_ong to fetch.
     */
    where: conta_banco_ongWhereUniqueInput
  }


  /**
   * conta_banco_ong base type for findFirst actions
   */
  export type conta_banco_ongFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * Filter, which conta_banco_ong to fetch.
     */
    where?: conta_banco_ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of conta_banco_ongs to fetch.
     */
    orderBy?: Enumerable<conta_banco_ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for conta_banco_ongs.
     */
    cursor?: conta_banco_ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` conta_banco_ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` conta_banco_ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of conta_banco_ongs.
     */
    distinct?: Enumerable<Conta_banco_ongScalarFieldEnum>
  }

  /**
   * conta_banco_ong findFirst
   */
  export interface conta_banco_ongFindFirstArgs extends conta_banco_ongFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * conta_banco_ong findFirstOrThrow
   */
  export type conta_banco_ongFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * Filter, which conta_banco_ong to fetch.
     */
    where?: conta_banco_ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of conta_banco_ongs to fetch.
     */
    orderBy?: Enumerable<conta_banco_ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for conta_banco_ongs.
     */
    cursor?: conta_banco_ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` conta_banco_ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` conta_banco_ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of conta_banco_ongs.
     */
    distinct?: Enumerable<Conta_banco_ongScalarFieldEnum>
  }


  /**
   * conta_banco_ong findMany
   */
  export type conta_banco_ongFindManyArgs = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * Filter, which conta_banco_ongs to fetch.
     */
    where?: conta_banco_ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of conta_banco_ongs to fetch.
     */
    orderBy?: Enumerable<conta_banco_ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing conta_banco_ongs.
     */
    cursor?: conta_banco_ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` conta_banco_ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` conta_banco_ongs.
     */
    skip?: number
    distinct?: Enumerable<Conta_banco_ongScalarFieldEnum>
  }


  /**
   * conta_banco_ong create
   */
  export type conta_banco_ongCreateArgs = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * The data needed to create a conta_banco_ong.
     */
    data: XOR<conta_banco_ongCreateInput, conta_banco_ongUncheckedCreateInput>
  }


  /**
   * conta_banco_ong createMany
   */
  export type conta_banco_ongCreateManyArgs = {
    /**
     * The data used to create many conta_banco_ongs.
     */
    data: Enumerable<conta_banco_ongCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * conta_banco_ong update
   */
  export type conta_banco_ongUpdateArgs = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * The data needed to update a conta_banco_ong.
     */
    data: XOR<conta_banco_ongUpdateInput, conta_banco_ongUncheckedUpdateInput>
    /**
     * Choose, which conta_banco_ong to update.
     */
    where: conta_banco_ongWhereUniqueInput
  }


  /**
   * conta_banco_ong updateMany
   */
  export type conta_banco_ongUpdateManyArgs = {
    /**
     * The data used to update conta_banco_ongs.
     */
    data: XOR<conta_banco_ongUpdateManyMutationInput, conta_banco_ongUncheckedUpdateManyInput>
    /**
     * Filter which conta_banco_ongs to update
     */
    where?: conta_banco_ongWhereInput
  }


  /**
   * conta_banco_ong upsert
   */
  export type conta_banco_ongUpsertArgs = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * The filter to search for the conta_banco_ong to update in case it exists.
     */
    where: conta_banco_ongWhereUniqueInput
    /**
     * In case the conta_banco_ong found by the `where` argument doesn't exist, create a new conta_banco_ong with this data.
     */
    create: XOR<conta_banco_ongCreateInput, conta_banco_ongUncheckedCreateInput>
    /**
     * In case the conta_banco_ong was found with the provided `where` argument, update it with this data.
     */
    update: XOR<conta_banco_ongUpdateInput, conta_banco_ongUncheckedUpdateInput>
  }


  /**
   * conta_banco_ong delete
   */
  export type conta_banco_ongDeleteArgs = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
    /**
     * Filter which conta_banco_ong to delete.
     */
    where: conta_banco_ongWhereUniqueInput
  }


  /**
   * conta_banco_ong deleteMany
   */
  export type conta_banco_ongDeleteManyArgs = {
    /**
     * Filter which conta_banco_ongs to delete
     */
    where?: conta_banco_ongWhereInput
  }


  /**
   * conta_banco_ong without action
   */
  export type conta_banco_ongArgs = {
    /**
     * Select specific fields to fetch from the conta_banco_ong
     */
    select?: conta_banco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conta_banco_ongInclude | null
  }



  /**
   * Model endereco_ong
   */


  export type AggregateEndereco_ong = {
    _count: Endereco_ongCountAggregateOutputType | null
    _min: Endereco_ongMinAggregateOutputType | null
    _max: Endereco_ongMaxAggregateOutputType | null
  }

  export type Endereco_ongMinAggregateOutputType = {
    cnpj_end: string | null
    cep: string | null
    cidade: string | null
    bairro: string | null
    rua: string | null
    numero: string | null
  }

  export type Endereco_ongMaxAggregateOutputType = {
    cnpj_end: string | null
    cep: string | null
    cidade: string | null
    bairro: string | null
    rua: string | null
    numero: string | null
  }

  export type Endereco_ongCountAggregateOutputType = {
    cnpj_end: number
    cep: number
    cidade: number
    bairro: number
    rua: number
    numero: number
    _all: number
  }


  export type Endereco_ongMinAggregateInputType = {
    cnpj_end?: true
    cep?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
  }

  export type Endereco_ongMaxAggregateInputType = {
    cnpj_end?: true
    cep?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
  }

  export type Endereco_ongCountAggregateInputType = {
    cnpj_end?: true
    cep?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
    _all?: true
  }

  export type Endereco_ongAggregateArgs = {
    /**
     * Filter which endereco_ong to aggregate.
     */
    where?: endereco_ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of endereco_ongs to fetch.
     */
    orderBy?: Enumerable<endereco_ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: endereco_ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` endereco_ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` endereco_ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned endereco_ongs
    **/
    _count?: true | Endereco_ongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Endereco_ongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Endereco_ongMaxAggregateInputType
  }

  export type GetEndereco_ongAggregateType<T extends Endereco_ongAggregateArgs> = {
        [P in keyof T & keyof AggregateEndereco_ong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEndereco_ong[P]>
      : GetScalarType<T[P], AggregateEndereco_ong[P]>
  }




  export type Endereco_ongGroupByArgs = {
    where?: endereco_ongWhereInput
    orderBy?: Enumerable<endereco_ongOrderByWithAggregationInput>
    by: Endereco_ongScalarFieldEnum[]
    having?: endereco_ongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Endereco_ongCountAggregateInputType | true
    _min?: Endereco_ongMinAggregateInputType
    _max?: Endereco_ongMaxAggregateInputType
  }


  export type Endereco_ongGroupByOutputType = {
    cnpj_end: string
    cep: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    _count: Endereco_ongCountAggregateOutputType | null
    _min: Endereco_ongMinAggregateOutputType | null
    _max: Endereco_ongMaxAggregateOutputType | null
  }

  type GetEndereco_ongGroupByPayload<T extends Endereco_ongGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Endereco_ongGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Endereco_ongGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Endereco_ongGroupByOutputType[P]>
            : GetScalarType<T[P], Endereco_ongGroupByOutputType[P]>
        }
      >
    >


  export type endereco_ongSelect = {
    cnpj_end?: boolean
    cep?: boolean
    cidade?: boolean
    bairro?: boolean
    rua?: boolean
    numero?: boolean
    ong?: boolean | ongArgs
  }


  export type endereco_ongInclude = {
    ong?: boolean | ongArgs
  }

  export type endereco_ongGetPayload<S extends boolean | null | undefined | endereco_ongArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? endereco_ong :
    S extends undefined ? never :
    S extends { include: any } & (endereco_ongArgs | endereco_ongFindManyArgs)
    ? endereco_ong  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ong' ? ongGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (endereco_ongArgs | endereco_ongFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ong' ? ongGetPayload<S['select'][P]> :  P extends keyof endereco_ong ? endereco_ong[P] : never
  } 
      : endereco_ong


  type endereco_ongCountArgs = 
    Omit<endereco_ongFindManyArgs, 'select' | 'include'> & {
      select?: Endereco_ongCountAggregateInputType | true
    }

  export interface endereco_ongDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Endereco_ong that matches the filter.
     * @param {endereco_ongFindUniqueArgs} args - Arguments to find a Endereco_ong
     * @example
     * // Get one Endereco_ong
     * const endereco_ong = await prisma.endereco_ong.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends endereco_ongFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, endereco_ongFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'endereco_ong'> extends True ? Prisma__endereco_ongClient<endereco_ongGetPayload<T>> : Prisma__endereco_ongClient<endereco_ongGetPayload<T> | null, null>

    /**
     * Find one Endereco_ong that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {endereco_ongFindUniqueOrThrowArgs} args - Arguments to find a Endereco_ong
     * @example
     * // Get one Endereco_ong
     * const endereco_ong = await prisma.endereco_ong.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends endereco_ongFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, endereco_ongFindUniqueOrThrowArgs>
    ): Prisma__endereco_ongClient<endereco_ongGetPayload<T>>

    /**
     * Find the first Endereco_ong that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_ongFindFirstArgs} args - Arguments to find a Endereco_ong
     * @example
     * // Get one Endereco_ong
     * const endereco_ong = await prisma.endereco_ong.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends endereco_ongFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, endereco_ongFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'endereco_ong'> extends True ? Prisma__endereco_ongClient<endereco_ongGetPayload<T>> : Prisma__endereco_ongClient<endereco_ongGetPayload<T> | null, null>

    /**
     * Find the first Endereco_ong that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_ongFindFirstOrThrowArgs} args - Arguments to find a Endereco_ong
     * @example
     * // Get one Endereco_ong
     * const endereco_ong = await prisma.endereco_ong.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends endereco_ongFindFirstOrThrowArgs>(
      args?: SelectSubset<T, endereco_ongFindFirstOrThrowArgs>
    ): Prisma__endereco_ongClient<endereco_ongGetPayload<T>>

    /**
     * Find zero or more Endereco_ongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_ongFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Endereco_ongs
     * const endereco_ongs = await prisma.endereco_ong.findMany()
     * 
     * // Get first 10 Endereco_ongs
     * const endereco_ongs = await prisma.endereco_ong.findMany({ take: 10 })
     * 
     * // Only select the `cnpj_end`
     * const endereco_ongWithCnpj_endOnly = await prisma.endereco_ong.findMany({ select: { cnpj_end: true } })
     * 
    **/
    findMany<T extends endereco_ongFindManyArgs>(
      args?: SelectSubset<T, endereco_ongFindManyArgs>
    ): Prisma.PrismaPromise<Array<endereco_ongGetPayload<T>>>

    /**
     * Create a Endereco_ong.
     * @param {endereco_ongCreateArgs} args - Arguments to create a Endereco_ong.
     * @example
     * // Create one Endereco_ong
     * const Endereco_ong = await prisma.endereco_ong.create({
     *   data: {
     *     // ... data to create a Endereco_ong
     *   }
     * })
     * 
    **/
    create<T extends endereco_ongCreateArgs>(
      args: SelectSubset<T, endereco_ongCreateArgs>
    ): Prisma__endereco_ongClient<endereco_ongGetPayload<T>>

    /**
     * Create many Endereco_ongs.
     *     @param {endereco_ongCreateManyArgs} args - Arguments to create many Endereco_ongs.
     *     @example
     *     // Create many Endereco_ongs
     *     const endereco_ong = await prisma.endereco_ong.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends endereco_ongCreateManyArgs>(
      args?: SelectSubset<T, endereco_ongCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Endereco_ong.
     * @param {endereco_ongDeleteArgs} args - Arguments to delete one Endereco_ong.
     * @example
     * // Delete one Endereco_ong
     * const Endereco_ong = await prisma.endereco_ong.delete({
     *   where: {
     *     // ... filter to delete one Endereco_ong
     *   }
     * })
     * 
    **/
    delete<T extends endereco_ongDeleteArgs>(
      args: SelectSubset<T, endereco_ongDeleteArgs>
    ): Prisma__endereco_ongClient<endereco_ongGetPayload<T>>

    /**
     * Update one Endereco_ong.
     * @param {endereco_ongUpdateArgs} args - Arguments to update one Endereco_ong.
     * @example
     * // Update one Endereco_ong
     * const endereco_ong = await prisma.endereco_ong.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends endereco_ongUpdateArgs>(
      args: SelectSubset<T, endereco_ongUpdateArgs>
    ): Prisma__endereco_ongClient<endereco_ongGetPayload<T>>

    /**
     * Delete zero or more Endereco_ongs.
     * @param {endereco_ongDeleteManyArgs} args - Arguments to filter Endereco_ongs to delete.
     * @example
     * // Delete a few Endereco_ongs
     * const { count } = await prisma.endereco_ong.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends endereco_ongDeleteManyArgs>(
      args?: SelectSubset<T, endereco_ongDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Endereco_ongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_ongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Endereco_ongs
     * const endereco_ong = await prisma.endereco_ong.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends endereco_ongUpdateManyArgs>(
      args: SelectSubset<T, endereco_ongUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Endereco_ong.
     * @param {endereco_ongUpsertArgs} args - Arguments to update or create a Endereco_ong.
     * @example
     * // Update or create a Endereco_ong
     * const endereco_ong = await prisma.endereco_ong.upsert({
     *   create: {
     *     // ... data to create a Endereco_ong
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Endereco_ong we want to update
     *   }
     * })
    **/
    upsert<T extends endereco_ongUpsertArgs>(
      args: SelectSubset<T, endereco_ongUpsertArgs>
    ): Prisma__endereco_ongClient<endereco_ongGetPayload<T>>

    /**
     * Count the number of Endereco_ongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_ongCountArgs} args - Arguments to filter Endereco_ongs to count.
     * @example
     * // Count the number of Endereco_ongs
     * const count = await prisma.endereco_ong.count({
     *   where: {
     *     // ... the filter for the Endereco_ongs we want to count
     *   }
     * })
    **/
    count<T extends endereco_ongCountArgs>(
      args?: Subset<T, endereco_ongCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Endereco_ongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Endereco_ong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Endereco_ongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Endereco_ongAggregateArgs>(args: Subset<T, Endereco_ongAggregateArgs>): Prisma.PrismaPromise<GetEndereco_ongAggregateType<T>>

    /**
     * Group by Endereco_ong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Endereco_ongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Endereco_ongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Endereco_ongGroupByArgs['orderBy'] }
        : { orderBy?: Endereco_ongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Endereco_ongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEndereco_ongGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for endereco_ong.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__endereco_ongClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ong<T extends ongArgs= {}>(args?: Subset<T, ongArgs>): Prisma__ongClient<ongGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * endereco_ong base type for findUnique actions
   */
  export type endereco_ongFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * Filter, which endereco_ong to fetch.
     */
    where: endereco_ongWhereUniqueInput
  }

  /**
   * endereco_ong findUnique
   */
  export interface endereco_ongFindUniqueArgs extends endereco_ongFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * endereco_ong findUniqueOrThrow
   */
  export type endereco_ongFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * Filter, which endereco_ong to fetch.
     */
    where: endereco_ongWhereUniqueInput
  }


  /**
   * endereco_ong base type for findFirst actions
   */
  export type endereco_ongFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * Filter, which endereco_ong to fetch.
     */
    where?: endereco_ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of endereco_ongs to fetch.
     */
    orderBy?: Enumerable<endereco_ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for endereco_ongs.
     */
    cursor?: endereco_ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` endereco_ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` endereco_ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of endereco_ongs.
     */
    distinct?: Enumerable<Endereco_ongScalarFieldEnum>
  }

  /**
   * endereco_ong findFirst
   */
  export interface endereco_ongFindFirstArgs extends endereco_ongFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * endereco_ong findFirstOrThrow
   */
  export type endereco_ongFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * Filter, which endereco_ong to fetch.
     */
    where?: endereco_ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of endereco_ongs to fetch.
     */
    orderBy?: Enumerable<endereco_ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for endereco_ongs.
     */
    cursor?: endereco_ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` endereco_ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` endereco_ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of endereco_ongs.
     */
    distinct?: Enumerable<Endereco_ongScalarFieldEnum>
  }


  /**
   * endereco_ong findMany
   */
  export type endereco_ongFindManyArgs = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * Filter, which endereco_ongs to fetch.
     */
    where?: endereco_ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of endereco_ongs to fetch.
     */
    orderBy?: Enumerable<endereco_ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing endereco_ongs.
     */
    cursor?: endereco_ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` endereco_ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` endereco_ongs.
     */
    skip?: number
    distinct?: Enumerable<Endereco_ongScalarFieldEnum>
  }


  /**
   * endereco_ong create
   */
  export type endereco_ongCreateArgs = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * The data needed to create a endereco_ong.
     */
    data: XOR<endereco_ongCreateInput, endereco_ongUncheckedCreateInput>
  }


  /**
   * endereco_ong createMany
   */
  export type endereco_ongCreateManyArgs = {
    /**
     * The data used to create many endereco_ongs.
     */
    data: Enumerable<endereco_ongCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * endereco_ong update
   */
  export type endereco_ongUpdateArgs = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * The data needed to update a endereco_ong.
     */
    data: XOR<endereco_ongUpdateInput, endereco_ongUncheckedUpdateInput>
    /**
     * Choose, which endereco_ong to update.
     */
    where: endereco_ongWhereUniqueInput
  }


  /**
   * endereco_ong updateMany
   */
  export type endereco_ongUpdateManyArgs = {
    /**
     * The data used to update endereco_ongs.
     */
    data: XOR<endereco_ongUpdateManyMutationInput, endereco_ongUncheckedUpdateManyInput>
    /**
     * Filter which endereco_ongs to update
     */
    where?: endereco_ongWhereInput
  }


  /**
   * endereco_ong upsert
   */
  export type endereco_ongUpsertArgs = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * The filter to search for the endereco_ong to update in case it exists.
     */
    where: endereco_ongWhereUniqueInput
    /**
     * In case the endereco_ong found by the `where` argument doesn't exist, create a new endereco_ong with this data.
     */
    create: XOR<endereco_ongCreateInput, endereco_ongUncheckedCreateInput>
    /**
     * In case the endereco_ong was found with the provided `where` argument, update it with this data.
     */
    update: XOR<endereco_ongUpdateInput, endereco_ongUncheckedUpdateInput>
  }


  /**
   * endereco_ong delete
   */
  export type endereco_ongDeleteArgs = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
    /**
     * Filter which endereco_ong to delete.
     */
    where: endereco_ongWhereUniqueInput
  }


  /**
   * endereco_ong deleteMany
   */
  export type endereco_ongDeleteManyArgs = {
    /**
     * Filter which endereco_ongs to delete
     */
    where?: endereco_ongWhereInput
  }


  /**
   * endereco_ong without action
   */
  export type endereco_ongArgs = {
    /**
     * Select specific fields to fetch from the endereco_ong
     */
    select?: endereco_ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_ongInclude | null
  }



  /**
   * Model endereco_pessoas
   */


  export type AggregateEndereco_pessoas = {
    _count: Endereco_pessoasCountAggregateOutputType | null
    _min: Endereco_pessoasMinAggregateOutputType | null
    _max: Endereco_pessoasMaxAggregateOutputType | null
  }

  export type Endereco_pessoasMinAggregateOutputType = {
    cpf_end: string | null
    cidade: string | null
    bairro: string | null
    rua: string | null
    numero: string | null
    tipoMoradia: string | null
  }

  export type Endereco_pessoasMaxAggregateOutputType = {
    cpf_end: string | null
    cidade: string | null
    bairro: string | null
    rua: string | null
    numero: string | null
    tipoMoradia: string | null
  }

  export type Endereco_pessoasCountAggregateOutputType = {
    cpf_end: number
    cidade: number
    bairro: number
    rua: number
    numero: number
    tipoMoradia: number
    _all: number
  }


  export type Endereco_pessoasMinAggregateInputType = {
    cpf_end?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
    tipoMoradia?: true
  }

  export type Endereco_pessoasMaxAggregateInputType = {
    cpf_end?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
    tipoMoradia?: true
  }

  export type Endereco_pessoasCountAggregateInputType = {
    cpf_end?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
    tipoMoradia?: true
    _all?: true
  }

  export type Endereco_pessoasAggregateArgs = {
    /**
     * Filter which endereco_pessoas to aggregate.
     */
    where?: endereco_pessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of endereco_pessoas to fetch.
     */
    orderBy?: Enumerable<endereco_pessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: endereco_pessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` endereco_pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` endereco_pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned endereco_pessoas
    **/
    _count?: true | Endereco_pessoasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Endereco_pessoasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Endereco_pessoasMaxAggregateInputType
  }

  export type GetEndereco_pessoasAggregateType<T extends Endereco_pessoasAggregateArgs> = {
        [P in keyof T & keyof AggregateEndereco_pessoas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEndereco_pessoas[P]>
      : GetScalarType<T[P], AggregateEndereco_pessoas[P]>
  }




  export type Endereco_pessoasGroupByArgs = {
    where?: endereco_pessoasWhereInput
    orderBy?: Enumerable<endereco_pessoasOrderByWithAggregationInput>
    by: Endereco_pessoasScalarFieldEnum[]
    having?: endereco_pessoasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Endereco_pessoasCountAggregateInputType | true
    _min?: Endereco_pessoasMinAggregateInputType
    _max?: Endereco_pessoasMaxAggregateInputType
  }


  export type Endereco_pessoasGroupByOutputType = {
    cpf_end: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    tipoMoradia: string
    _count: Endereco_pessoasCountAggregateOutputType | null
    _min: Endereco_pessoasMinAggregateOutputType | null
    _max: Endereco_pessoasMaxAggregateOutputType | null
  }

  type GetEndereco_pessoasGroupByPayload<T extends Endereco_pessoasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Endereco_pessoasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Endereco_pessoasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Endereco_pessoasGroupByOutputType[P]>
            : GetScalarType<T[P], Endereco_pessoasGroupByOutputType[P]>
        }
      >
    >


  export type endereco_pessoasSelect = {
    cpf_end?: boolean
    cidade?: boolean
    bairro?: boolean
    rua?: boolean
    numero?: boolean
    tipoMoradia?: boolean
    pessoas?: boolean | pessoasArgs
  }


  export type endereco_pessoasInclude = {
    pessoas?: boolean | pessoasArgs
  }

  export type endereco_pessoasGetPayload<S extends boolean | null | undefined | endereco_pessoasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? endereco_pessoas :
    S extends undefined ? never :
    S extends { include: any } & (endereco_pessoasArgs | endereco_pessoasFindManyArgs)
    ? endereco_pessoas  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pessoas' ? pessoasGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (endereco_pessoasArgs | endereco_pessoasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pessoas' ? pessoasGetPayload<S['select'][P]> :  P extends keyof endereco_pessoas ? endereco_pessoas[P] : never
  } 
      : endereco_pessoas


  type endereco_pessoasCountArgs = 
    Omit<endereco_pessoasFindManyArgs, 'select' | 'include'> & {
      select?: Endereco_pessoasCountAggregateInputType | true
    }

  export interface endereco_pessoasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Endereco_pessoas that matches the filter.
     * @param {endereco_pessoasFindUniqueArgs} args - Arguments to find a Endereco_pessoas
     * @example
     * // Get one Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends endereco_pessoasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, endereco_pessoasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'endereco_pessoas'> extends True ? Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T>> : Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T> | null, null>

    /**
     * Find one Endereco_pessoas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {endereco_pessoasFindUniqueOrThrowArgs} args - Arguments to find a Endereco_pessoas
     * @example
     * // Get one Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends endereco_pessoasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, endereco_pessoasFindUniqueOrThrowArgs>
    ): Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T>>

    /**
     * Find the first Endereco_pessoas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_pessoasFindFirstArgs} args - Arguments to find a Endereco_pessoas
     * @example
     * // Get one Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends endereco_pessoasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, endereco_pessoasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'endereco_pessoas'> extends True ? Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T>> : Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T> | null, null>

    /**
     * Find the first Endereco_pessoas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_pessoasFindFirstOrThrowArgs} args - Arguments to find a Endereco_pessoas
     * @example
     * // Get one Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends endereco_pessoasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, endereco_pessoasFindFirstOrThrowArgs>
    ): Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T>>

    /**
     * Find zero or more Endereco_pessoas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_pessoasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.findMany()
     * 
     * // Get first 10 Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.findMany({ take: 10 })
     * 
     * // Only select the `cpf_end`
     * const endereco_pessoasWithCpf_endOnly = await prisma.endereco_pessoas.findMany({ select: { cpf_end: true } })
     * 
    **/
    findMany<T extends endereco_pessoasFindManyArgs>(
      args?: SelectSubset<T, endereco_pessoasFindManyArgs>
    ): Prisma.PrismaPromise<Array<endereco_pessoasGetPayload<T>>>

    /**
     * Create a Endereco_pessoas.
     * @param {endereco_pessoasCreateArgs} args - Arguments to create a Endereco_pessoas.
     * @example
     * // Create one Endereco_pessoas
     * const Endereco_pessoas = await prisma.endereco_pessoas.create({
     *   data: {
     *     // ... data to create a Endereco_pessoas
     *   }
     * })
     * 
    **/
    create<T extends endereco_pessoasCreateArgs>(
      args: SelectSubset<T, endereco_pessoasCreateArgs>
    ): Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T>>

    /**
     * Create many Endereco_pessoas.
     *     @param {endereco_pessoasCreateManyArgs} args - Arguments to create many Endereco_pessoas.
     *     @example
     *     // Create many Endereco_pessoas
     *     const endereco_pessoas = await prisma.endereco_pessoas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends endereco_pessoasCreateManyArgs>(
      args?: SelectSubset<T, endereco_pessoasCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Endereco_pessoas.
     * @param {endereco_pessoasDeleteArgs} args - Arguments to delete one Endereco_pessoas.
     * @example
     * // Delete one Endereco_pessoas
     * const Endereco_pessoas = await prisma.endereco_pessoas.delete({
     *   where: {
     *     // ... filter to delete one Endereco_pessoas
     *   }
     * })
     * 
    **/
    delete<T extends endereco_pessoasDeleteArgs>(
      args: SelectSubset<T, endereco_pessoasDeleteArgs>
    ): Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T>>

    /**
     * Update one Endereco_pessoas.
     * @param {endereco_pessoasUpdateArgs} args - Arguments to update one Endereco_pessoas.
     * @example
     * // Update one Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends endereco_pessoasUpdateArgs>(
      args: SelectSubset<T, endereco_pessoasUpdateArgs>
    ): Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T>>

    /**
     * Delete zero or more Endereco_pessoas.
     * @param {endereco_pessoasDeleteManyArgs} args - Arguments to filter Endereco_pessoas to delete.
     * @example
     * // Delete a few Endereco_pessoas
     * const { count } = await prisma.endereco_pessoas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends endereco_pessoasDeleteManyArgs>(
      args?: SelectSubset<T, endereco_pessoasDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Endereco_pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_pessoasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends endereco_pessoasUpdateManyArgs>(
      args: SelectSubset<T, endereco_pessoasUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Endereco_pessoas.
     * @param {endereco_pessoasUpsertArgs} args - Arguments to update or create a Endereco_pessoas.
     * @example
     * // Update or create a Endereco_pessoas
     * const endereco_pessoas = await prisma.endereco_pessoas.upsert({
     *   create: {
     *     // ... data to create a Endereco_pessoas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Endereco_pessoas we want to update
     *   }
     * })
    **/
    upsert<T extends endereco_pessoasUpsertArgs>(
      args: SelectSubset<T, endereco_pessoasUpsertArgs>
    ): Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T>>

    /**
     * Count the number of Endereco_pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {endereco_pessoasCountArgs} args - Arguments to filter Endereco_pessoas to count.
     * @example
     * // Count the number of Endereco_pessoas
     * const count = await prisma.endereco_pessoas.count({
     *   where: {
     *     // ... the filter for the Endereco_pessoas we want to count
     *   }
     * })
    **/
    count<T extends endereco_pessoasCountArgs>(
      args?: Subset<T, endereco_pessoasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Endereco_pessoasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Endereco_pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Endereco_pessoasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Endereco_pessoasAggregateArgs>(args: Subset<T, Endereco_pessoasAggregateArgs>): Prisma.PrismaPromise<GetEndereco_pessoasAggregateType<T>>

    /**
     * Group by Endereco_pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Endereco_pessoasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Endereco_pessoasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Endereco_pessoasGroupByArgs['orderBy'] }
        : { orderBy?: Endereco_pessoasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Endereco_pessoasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEndereco_pessoasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for endereco_pessoas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__endereco_pessoasClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pessoas<T extends pessoasArgs= {}>(args?: Subset<T, pessoasArgs>): Prisma__pessoasClient<pessoasGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * endereco_pessoas base type for findUnique actions
   */
  export type endereco_pessoasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * Filter, which endereco_pessoas to fetch.
     */
    where: endereco_pessoasWhereUniqueInput
  }

  /**
   * endereco_pessoas findUnique
   */
  export interface endereco_pessoasFindUniqueArgs extends endereco_pessoasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * endereco_pessoas findUniqueOrThrow
   */
  export type endereco_pessoasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * Filter, which endereco_pessoas to fetch.
     */
    where: endereco_pessoasWhereUniqueInput
  }


  /**
   * endereco_pessoas base type for findFirst actions
   */
  export type endereco_pessoasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * Filter, which endereco_pessoas to fetch.
     */
    where?: endereco_pessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of endereco_pessoas to fetch.
     */
    orderBy?: Enumerable<endereco_pessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for endereco_pessoas.
     */
    cursor?: endereco_pessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` endereco_pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` endereco_pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of endereco_pessoas.
     */
    distinct?: Enumerable<Endereco_pessoasScalarFieldEnum>
  }

  /**
   * endereco_pessoas findFirst
   */
  export interface endereco_pessoasFindFirstArgs extends endereco_pessoasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * endereco_pessoas findFirstOrThrow
   */
  export type endereco_pessoasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * Filter, which endereco_pessoas to fetch.
     */
    where?: endereco_pessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of endereco_pessoas to fetch.
     */
    orderBy?: Enumerable<endereco_pessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for endereco_pessoas.
     */
    cursor?: endereco_pessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` endereco_pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` endereco_pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of endereco_pessoas.
     */
    distinct?: Enumerable<Endereco_pessoasScalarFieldEnum>
  }


  /**
   * endereco_pessoas findMany
   */
  export type endereco_pessoasFindManyArgs = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * Filter, which endereco_pessoas to fetch.
     */
    where?: endereco_pessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of endereco_pessoas to fetch.
     */
    orderBy?: Enumerable<endereco_pessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing endereco_pessoas.
     */
    cursor?: endereco_pessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` endereco_pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` endereco_pessoas.
     */
    skip?: number
    distinct?: Enumerable<Endereco_pessoasScalarFieldEnum>
  }


  /**
   * endereco_pessoas create
   */
  export type endereco_pessoasCreateArgs = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * The data needed to create a endereco_pessoas.
     */
    data: XOR<endereco_pessoasCreateInput, endereco_pessoasUncheckedCreateInput>
  }


  /**
   * endereco_pessoas createMany
   */
  export type endereco_pessoasCreateManyArgs = {
    /**
     * The data used to create many endereco_pessoas.
     */
    data: Enumerable<endereco_pessoasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * endereco_pessoas update
   */
  export type endereco_pessoasUpdateArgs = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * The data needed to update a endereco_pessoas.
     */
    data: XOR<endereco_pessoasUpdateInput, endereco_pessoasUncheckedUpdateInput>
    /**
     * Choose, which endereco_pessoas to update.
     */
    where: endereco_pessoasWhereUniqueInput
  }


  /**
   * endereco_pessoas updateMany
   */
  export type endereco_pessoasUpdateManyArgs = {
    /**
     * The data used to update endereco_pessoas.
     */
    data: XOR<endereco_pessoasUpdateManyMutationInput, endereco_pessoasUncheckedUpdateManyInput>
    /**
     * Filter which endereco_pessoas to update
     */
    where?: endereco_pessoasWhereInput
  }


  /**
   * endereco_pessoas upsert
   */
  export type endereco_pessoasUpsertArgs = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * The filter to search for the endereco_pessoas to update in case it exists.
     */
    where: endereco_pessoasWhereUniqueInput
    /**
     * In case the endereco_pessoas found by the `where` argument doesn't exist, create a new endereco_pessoas with this data.
     */
    create: XOR<endereco_pessoasCreateInput, endereco_pessoasUncheckedCreateInput>
    /**
     * In case the endereco_pessoas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<endereco_pessoasUpdateInput, endereco_pessoasUncheckedUpdateInput>
  }


  /**
   * endereco_pessoas delete
   */
  export type endereco_pessoasDeleteArgs = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
    /**
     * Filter which endereco_pessoas to delete.
     */
    where: endereco_pessoasWhereUniqueInput
  }


  /**
   * endereco_pessoas deleteMany
   */
  export type endereco_pessoasDeleteManyArgs = {
    /**
     * Filter which endereco_pessoas to delete
     */
    where?: endereco_pessoasWhereInput
  }


  /**
   * endereco_pessoas without action
   */
  export type endereco_pessoasArgs = {
    /**
     * Select specific fields to fetch from the endereco_pessoas
     */
    select?: endereco_pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: endereco_pessoasInclude | null
  }



  /**
   * Model ong
   */


  export type AggregateOng = {
    _count: OngCountAggregateOutputType | null
    _min: OngMinAggregateOutputType | null
    _max: OngMaxAggregateOutputType | null
  }

  export type OngMinAggregateOutputType = {
    cnpj: string | null
    nome: string | null
    email: string | null
    senha: string | null
    facebook: string | null
    whatsapp: string | null
    descricao_ong: string | null
    foto: Buffer | null
  }

  export type OngMaxAggregateOutputType = {
    cnpj: string | null
    nome: string | null
    email: string | null
    senha: string | null
    facebook: string | null
    whatsapp: string | null
    descricao_ong: string | null
    foto: Buffer | null
  }

  export type OngCountAggregateOutputType = {
    cnpj: number
    nome: number
    email: number
    senha: number
    facebook: number
    whatsapp: number
    descricao_ong: number
    foto: number
    _all: number
  }


  export type OngMinAggregateInputType = {
    cnpj?: true
    nome?: true
    email?: true
    senha?: true
    facebook?: true
    whatsapp?: true
    descricao_ong?: true
    foto?: true
  }

  export type OngMaxAggregateInputType = {
    cnpj?: true
    nome?: true
    email?: true
    senha?: true
    facebook?: true
    whatsapp?: true
    descricao_ong?: true
    foto?: true
  }

  export type OngCountAggregateInputType = {
    cnpj?: true
    nome?: true
    email?: true
    senha?: true
    facebook?: true
    whatsapp?: true
    descricao_ong?: true
    foto?: true
    _all?: true
  }

  export type OngAggregateArgs = {
    /**
     * Filter which ong to aggregate.
     */
    where?: ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ongs to fetch.
     */
    orderBy?: Enumerable<ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ongs
    **/
    _count?: true | OngCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OngMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OngMaxAggregateInputType
  }

  export type GetOngAggregateType<T extends OngAggregateArgs> = {
        [P in keyof T & keyof AggregateOng]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOng[P]>
      : GetScalarType<T[P], AggregateOng[P]>
  }




  export type OngGroupByArgs = {
    where?: ongWhereInput
    orderBy?: Enumerable<ongOrderByWithAggregationInput>
    by: OngScalarFieldEnum[]
    having?: ongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OngCountAggregateInputType | true
    _min?: OngMinAggregateInputType
    _max?: OngMaxAggregateInputType
  }


  export type OngGroupByOutputType = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook: string | null
    whatsapp: string | null
    descricao_ong: string
    foto: Buffer
    _count: OngCountAggregateOutputType | null
    _min: OngMinAggregateOutputType | null
    _max: OngMaxAggregateOutputType | null
  }

  type GetOngGroupByPayload<T extends OngGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OngGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OngGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OngGroupByOutputType[P]>
            : GetScalarType<T[P], OngGroupByOutputType[P]>
        }
      >
    >


  export type ongSelect = {
    cnpj?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    facebook?: boolean
    whatsapp?: boolean
    descricao_ong?: boolean
    foto?: boolean
    animais?: boolean | ong$animaisArgs
    conta_banco_ong?: boolean | conta_banco_ongArgs
    endereco_ong?: boolean | endereco_ongArgs
    _count?: boolean | OngCountOutputTypeArgs
  }


  export type ongInclude = {
    animais?: boolean | ong$animaisArgs
    conta_banco_ong?: boolean | conta_banco_ongArgs
    endereco_ong?: boolean | endereco_ongArgs
    _count?: boolean | OngCountOutputTypeArgs
  }

  export type ongGetPayload<S extends boolean | null | undefined | ongArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ong :
    S extends undefined ? never :
    S extends { include: any } & (ongArgs | ongFindManyArgs)
    ? ong  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'animais' ? Array < animaisGetPayload<S['include'][P]>>  :
        P extends 'conta_banco_ong' ? conta_banco_ongGetPayload<S['include'][P]> | null :
        P extends 'endereco_ong' ? endereco_ongGetPayload<S['include'][P]> | null :
        P extends '_count' ? OngCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ongArgs | ongFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'animais' ? Array < animaisGetPayload<S['select'][P]>>  :
        P extends 'conta_banco_ong' ? conta_banco_ongGetPayload<S['select'][P]> | null :
        P extends 'endereco_ong' ? endereco_ongGetPayload<S['select'][P]> | null :
        P extends '_count' ? OngCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof ong ? ong[P] : never
  } 
      : ong


  type ongCountArgs = 
    Omit<ongFindManyArgs, 'select' | 'include'> & {
      select?: OngCountAggregateInputType | true
    }

  export interface ongDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Ong that matches the filter.
     * @param {ongFindUniqueArgs} args - Arguments to find a Ong
     * @example
     * // Get one Ong
     * const ong = await prisma.ong.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ongFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ongFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ong'> extends True ? Prisma__ongClient<ongGetPayload<T>> : Prisma__ongClient<ongGetPayload<T> | null, null>

    /**
     * Find one Ong that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ongFindUniqueOrThrowArgs} args - Arguments to find a Ong
     * @example
     * // Get one Ong
     * const ong = await prisma.ong.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ongFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ongFindUniqueOrThrowArgs>
    ): Prisma__ongClient<ongGetPayload<T>>

    /**
     * Find the first Ong that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ongFindFirstArgs} args - Arguments to find a Ong
     * @example
     * // Get one Ong
     * const ong = await prisma.ong.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ongFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ongFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ong'> extends True ? Prisma__ongClient<ongGetPayload<T>> : Prisma__ongClient<ongGetPayload<T> | null, null>

    /**
     * Find the first Ong that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ongFindFirstOrThrowArgs} args - Arguments to find a Ong
     * @example
     * // Get one Ong
     * const ong = await prisma.ong.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ongFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ongFindFirstOrThrowArgs>
    ): Prisma__ongClient<ongGetPayload<T>>

    /**
     * Find zero or more Ongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ongFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ongs
     * const ongs = await prisma.ong.findMany()
     * 
     * // Get first 10 Ongs
     * const ongs = await prisma.ong.findMany({ take: 10 })
     * 
     * // Only select the `cnpj`
     * const ongWithCnpjOnly = await prisma.ong.findMany({ select: { cnpj: true } })
     * 
    **/
    findMany<T extends ongFindManyArgs>(
      args?: SelectSubset<T, ongFindManyArgs>
    ): Prisma.PrismaPromise<Array<ongGetPayload<T>>>

    /**
     * Create a Ong.
     * @param {ongCreateArgs} args - Arguments to create a Ong.
     * @example
     * // Create one Ong
     * const Ong = await prisma.ong.create({
     *   data: {
     *     // ... data to create a Ong
     *   }
     * })
     * 
    **/
    create<T extends ongCreateArgs>(
      args: SelectSubset<T, ongCreateArgs>
    ): Prisma__ongClient<ongGetPayload<T>>

    /**
     * Create many Ongs.
     *     @param {ongCreateManyArgs} args - Arguments to create many Ongs.
     *     @example
     *     // Create many Ongs
     *     const ong = await prisma.ong.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ongCreateManyArgs>(
      args?: SelectSubset<T, ongCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ong.
     * @param {ongDeleteArgs} args - Arguments to delete one Ong.
     * @example
     * // Delete one Ong
     * const Ong = await prisma.ong.delete({
     *   where: {
     *     // ... filter to delete one Ong
     *   }
     * })
     * 
    **/
    delete<T extends ongDeleteArgs>(
      args: SelectSubset<T, ongDeleteArgs>
    ): Prisma__ongClient<ongGetPayload<T>>

    /**
     * Update one Ong.
     * @param {ongUpdateArgs} args - Arguments to update one Ong.
     * @example
     * // Update one Ong
     * const ong = await prisma.ong.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ongUpdateArgs>(
      args: SelectSubset<T, ongUpdateArgs>
    ): Prisma__ongClient<ongGetPayload<T>>

    /**
     * Delete zero or more Ongs.
     * @param {ongDeleteManyArgs} args - Arguments to filter Ongs to delete.
     * @example
     * // Delete a few Ongs
     * const { count } = await prisma.ong.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ongDeleteManyArgs>(
      args?: SelectSubset<T, ongDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ongs
     * const ong = await prisma.ong.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ongUpdateManyArgs>(
      args: SelectSubset<T, ongUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ong.
     * @param {ongUpsertArgs} args - Arguments to update or create a Ong.
     * @example
     * // Update or create a Ong
     * const ong = await prisma.ong.upsert({
     *   create: {
     *     // ... data to create a Ong
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ong we want to update
     *   }
     * })
    **/
    upsert<T extends ongUpsertArgs>(
      args: SelectSubset<T, ongUpsertArgs>
    ): Prisma__ongClient<ongGetPayload<T>>

    /**
     * Count the number of Ongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ongCountArgs} args - Arguments to filter Ongs to count.
     * @example
     * // Count the number of Ongs
     * const count = await prisma.ong.count({
     *   where: {
     *     // ... the filter for the Ongs we want to count
     *   }
     * })
    **/
    count<T extends ongCountArgs>(
      args?: Subset<T, ongCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OngCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OngAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OngAggregateArgs>(args: Subset<T, OngAggregateArgs>): Prisma.PrismaPromise<GetOngAggregateType<T>>

    /**
     * Group by Ong.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OngGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OngGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OngGroupByArgs['orderBy'] }
        : { orderBy?: OngGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OngGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOngGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ong.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ongClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    animais<T extends ong$animaisArgs= {}>(args?: Subset<T, ong$animaisArgs>): Prisma.PrismaPromise<Array<animaisGetPayload<T>>| Null>;

    conta_banco_ong<T extends conta_banco_ongArgs= {}>(args?: Subset<T, conta_banco_ongArgs>): Prisma__conta_banco_ongClient<conta_banco_ongGetPayload<T> | Null>;

    endereco_ong<T extends endereco_ongArgs= {}>(args?: Subset<T, endereco_ongArgs>): Prisma__endereco_ongClient<endereco_ongGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ong base type for findUnique actions
   */
  export type ongFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * Filter, which ong to fetch.
     */
    where: ongWhereUniqueInput
  }

  /**
   * ong findUnique
   */
  export interface ongFindUniqueArgs extends ongFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ong findUniqueOrThrow
   */
  export type ongFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * Filter, which ong to fetch.
     */
    where: ongWhereUniqueInput
  }


  /**
   * ong base type for findFirst actions
   */
  export type ongFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * Filter, which ong to fetch.
     */
    where?: ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ongs to fetch.
     */
    orderBy?: Enumerable<ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ongs.
     */
    cursor?: ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ongs.
     */
    distinct?: Enumerable<OngScalarFieldEnum>
  }

  /**
   * ong findFirst
   */
  export interface ongFindFirstArgs extends ongFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ong findFirstOrThrow
   */
  export type ongFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * Filter, which ong to fetch.
     */
    where?: ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ongs to fetch.
     */
    orderBy?: Enumerable<ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ongs.
     */
    cursor?: ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ongs.
     */
    distinct?: Enumerable<OngScalarFieldEnum>
  }


  /**
   * ong findMany
   */
  export type ongFindManyArgs = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * Filter, which ongs to fetch.
     */
    where?: ongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ongs to fetch.
     */
    orderBy?: Enumerable<ongOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ongs.
     */
    cursor?: ongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ongs.
     */
    skip?: number
    distinct?: Enumerable<OngScalarFieldEnum>
  }


  /**
   * ong create
   */
  export type ongCreateArgs = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * The data needed to create a ong.
     */
    data: XOR<ongCreateInput, ongUncheckedCreateInput>
  }


  /**
   * ong createMany
   */
  export type ongCreateManyArgs = {
    /**
     * The data used to create many ongs.
     */
    data: Enumerable<ongCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ong update
   */
  export type ongUpdateArgs = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * The data needed to update a ong.
     */
    data: XOR<ongUpdateInput, ongUncheckedUpdateInput>
    /**
     * Choose, which ong to update.
     */
    where: ongWhereUniqueInput
  }


  /**
   * ong updateMany
   */
  export type ongUpdateManyArgs = {
    /**
     * The data used to update ongs.
     */
    data: XOR<ongUpdateManyMutationInput, ongUncheckedUpdateManyInput>
    /**
     * Filter which ongs to update
     */
    where?: ongWhereInput
  }


  /**
   * ong upsert
   */
  export type ongUpsertArgs = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * The filter to search for the ong to update in case it exists.
     */
    where: ongWhereUniqueInput
    /**
     * In case the ong found by the `where` argument doesn't exist, create a new ong with this data.
     */
    create: XOR<ongCreateInput, ongUncheckedCreateInput>
    /**
     * In case the ong was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ongUpdateInput, ongUncheckedUpdateInput>
  }


  /**
   * ong delete
   */
  export type ongDeleteArgs = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
    /**
     * Filter which ong to delete.
     */
    where: ongWhereUniqueInput
  }


  /**
   * ong deleteMany
   */
  export type ongDeleteManyArgs = {
    /**
     * Filter which ongs to delete
     */
    where?: ongWhereInput
  }


  /**
   * ong.animais
   */
  export type ong$animaisArgs = {
    /**
     * Select specific fields to fetch from the animais
     */
    select?: animaisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: animaisInclude | null
    where?: animaisWhereInput
    orderBy?: Enumerable<animaisOrderByWithRelationInput>
    cursor?: animaisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AnimaisScalarFieldEnum>
  }


  /**
   * ong without action
   */
  export type ongArgs = {
    /**
     * Select specific fields to fetch from the ong
     */
    select?: ongSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ongInclude | null
  }



  /**
   * Model pessoas
   */


  export type AggregatePessoas = {
    _count: PessoasCountAggregateOutputType | null
    _min: PessoasMinAggregateOutputType | null
    _max: PessoasMaxAggregateOutputType | null
  }

  export type PessoasMinAggregateOutputType = {
    cpf: string | null
    nome: string | null
    email: string | null
    telefone: string | null
  }

  export type PessoasMaxAggregateOutputType = {
    cpf: string | null
    nome: string | null
    email: string | null
    telefone: string | null
  }

  export type PessoasCountAggregateOutputType = {
    cpf: number
    nome: number
    email: number
    telefone: number
    _all: number
  }


  export type PessoasMinAggregateInputType = {
    cpf?: true
    nome?: true
    email?: true
    telefone?: true
  }

  export type PessoasMaxAggregateInputType = {
    cpf?: true
    nome?: true
    email?: true
    telefone?: true
  }

  export type PessoasCountAggregateInputType = {
    cpf?: true
    nome?: true
    email?: true
    telefone?: true
    _all?: true
  }

  export type PessoasAggregateArgs = {
    /**
     * Filter which pessoas to aggregate.
     */
    where?: pessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pessoas to fetch.
     */
    orderBy?: Enumerable<pessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pessoas
    **/
    _count?: true | PessoasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PessoasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PessoasMaxAggregateInputType
  }

  export type GetPessoasAggregateType<T extends PessoasAggregateArgs> = {
        [P in keyof T & keyof AggregatePessoas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePessoas[P]>
      : GetScalarType<T[P], AggregatePessoas[P]>
  }




  export type PessoasGroupByArgs = {
    where?: pessoasWhereInput
    orderBy?: Enumerable<pessoasOrderByWithAggregationInput>
    by: PessoasScalarFieldEnum[]
    having?: pessoasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PessoasCountAggregateInputType | true
    _min?: PessoasMinAggregateInputType
    _max?: PessoasMaxAggregateInputType
  }


  export type PessoasGroupByOutputType = {
    cpf: string
    nome: string
    email: string
    telefone: string
    _count: PessoasCountAggregateOutputType | null
    _min: PessoasMinAggregateOutputType | null
    _max: PessoasMaxAggregateOutputType | null
  }

  type GetPessoasGroupByPayload<T extends PessoasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PessoasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PessoasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PessoasGroupByOutputType[P]>
            : GetScalarType<T[P], PessoasGroupByOutputType[P]>
        }
      >
    >


  export type pessoasSelect = {
    cpf?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    adotante?: boolean | adotanteArgs
    endereco_pessoas?: boolean | endereco_pessoasArgs
    voluntarios?: boolean | voluntariosArgs
  }


  export type pessoasInclude = {
    adotante?: boolean | adotanteArgs
    endereco_pessoas?: boolean | endereco_pessoasArgs
    voluntarios?: boolean | voluntariosArgs
  }

  export type pessoasGetPayload<S extends boolean | null | undefined | pessoasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? pessoas :
    S extends undefined ? never :
    S extends { include: any } & (pessoasArgs | pessoasFindManyArgs)
    ? pessoas  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'adotante' ? adotanteGetPayload<S['include'][P]> | null :
        P extends 'endereco_pessoas' ? endereco_pessoasGetPayload<S['include'][P]> | null :
        P extends 'voluntarios' ? voluntariosGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (pessoasArgs | pessoasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'adotante' ? adotanteGetPayload<S['select'][P]> | null :
        P extends 'endereco_pessoas' ? endereco_pessoasGetPayload<S['select'][P]> | null :
        P extends 'voluntarios' ? voluntariosGetPayload<S['select'][P]> | null :  P extends keyof pessoas ? pessoas[P] : never
  } 
      : pessoas


  type pessoasCountArgs = 
    Omit<pessoasFindManyArgs, 'select' | 'include'> & {
      select?: PessoasCountAggregateInputType | true
    }

  export interface pessoasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pessoas that matches the filter.
     * @param {pessoasFindUniqueArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pessoasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pessoasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pessoas'> extends True ? Prisma__pessoasClient<pessoasGetPayload<T>> : Prisma__pessoasClient<pessoasGetPayload<T> | null, null>

    /**
     * Find one Pessoas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {pessoasFindUniqueOrThrowArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pessoasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, pessoasFindUniqueOrThrowArgs>
    ): Prisma__pessoasClient<pessoasGetPayload<T>>

    /**
     * Find the first Pessoas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pessoasFindFirstArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pessoasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pessoasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pessoas'> extends True ? Prisma__pessoasClient<pessoasGetPayload<T>> : Prisma__pessoasClient<pessoasGetPayload<T> | null, null>

    /**
     * Find the first Pessoas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pessoasFindFirstOrThrowArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pessoasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, pessoasFindFirstOrThrowArgs>
    ): Prisma__pessoasClient<pessoasGetPayload<T>>

    /**
     * Find zero or more Pessoas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pessoasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pessoas
     * const pessoas = await prisma.pessoas.findMany()
     * 
     * // Get first 10 Pessoas
     * const pessoas = await prisma.pessoas.findMany({ take: 10 })
     * 
     * // Only select the `cpf`
     * const pessoasWithCpfOnly = await prisma.pessoas.findMany({ select: { cpf: true } })
     * 
    **/
    findMany<T extends pessoasFindManyArgs>(
      args?: SelectSubset<T, pessoasFindManyArgs>
    ): Prisma.PrismaPromise<Array<pessoasGetPayload<T>>>

    /**
     * Create a Pessoas.
     * @param {pessoasCreateArgs} args - Arguments to create a Pessoas.
     * @example
     * // Create one Pessoas
     * const Pessoas = await prisma.pessoas.create({
     *   data: {
     *     // ... data to create a Pessoas
     *   }
     * })
     * 
    **/
    create<T extends pessoasCreateArgs>(
      args: SelectSubset<T, pessoasCreateArgs>
    ): Prisma__pessoasClient<pessoasGetPayload<T>>

    /**
     * Create many Pessoas.
     *     @param {pessoasCreateManyArgs} args - Arguments to create many Pessoas.
     *     @example
     *     // Create many Pessoas
     *     const pessoas = await prisma.pessoas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends pessoasCreateManyArgs>(
      args?: SelectSubset<T, pessoasCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pessoas.
     * @param {pessoasDeleteArgs} args - Arguments to delete one Pessoas.
     * @example
     * // Delete one Pessoas
     * const Pessoas = await prisma.pessoas.delete({
     *   where: {
     *     // ... filter to delete one Pessoas
     *   }
     * })
     * 
    **/
    delete<T extends pessoasDeleteArgs>(
      args: SelectSubset<T, pessoasDeleteArgs>
    ): Prisma__pessoasClient<pessoasGetPayload<T>>

    /**
     * Update one Pessoas.
     * @param {pessoasUpdateArgs} args - Arguments to update one Pessoas.
     * @example
     * // Update one Pessoas
     * const pessoas = await prisma.pessoas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pessoasUpdateArgs>(
      args: SelectSubset<T, pessoasUpdateArgs>
    ): Prisma__pessoasClient<pessoasGetPayload<T>>

    /**
     * Delete zero or more Pessoas.
     * @param {pessoasDeleteManyArgs} args - Arguments to filter Pessoas to delete.
     * @example
     * // Delete a few Pessoas
     * const { count } = await prisma.pessoas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pessoasDeleteManyArgs>(
      args?: SelectSubset<T, pessoasDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pessoasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pessoas
     * const pessoas = await prisma.pessoas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pessoasUpdateManyArgs>(
      args: SelectSubset<T, pessoasUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pessoas.
     * @param {pessoasUpsertArgs} args - Arguments to update or create a Pessoas.
     * @example
     * // Update or create a Pessoas
     * const pessoas = await prisma.pessoas.upsert({
     *   create: {
     *     // ... data to create a Pessoas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pessoas we want to update
     *   }
     * })
    **/
    upsert<T extends pessoasUpsertArgs>(
      args: SelectSubset<T, pessoasUpsertArgs>
    ): Prisma__pessoasClient<pessoasGetPayload<T>>

    /**
     * Count the number of Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pessoasCountArgs} args - Arguments to filter Pessoas to count.
     * @example
     * // Count the number of Pessoas
     * const count = await prisma.pessoas.count({
     *   where: {
     *     // ... the filter for the Pessoas we want to count
     *   }
     * })
    **/
    count<T extends pessoasCountArgs>(
      args?: Subset<T, pessoasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PessoasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PessoasAggregateArgs>(args: Subset<T, PessoasAggregateArgs>): Prisma.PrismaPromise<GetPessoasAggregateType<T>>

    /**
     * Group by Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PessoasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PessoasGroupByArgs['orderBy'] }
        : { orderBy?: PessoasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PessoasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPessoasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for pessoas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pessoasClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    adotante<T extends adotanteArgs= {}>(args?: Subset<T, adotanteArgs>): Prisma__adotanteClient<adotanteGetPayload<T> | Null>;

    endereco_pessoas<T extends endereco_pessoasArgs= {}>(args?: Subset<T, endereco_pessoasArgs>): Prisma__endereco_pessoasClient<endereco_pessoasGetPayload<T> | Null>;

    voluntarios<T extends voluntariosArgs= {}>(args?: Subset<T, voluntariosArgs>): Prisma__voluntariosClient<voluntariosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * pessoas base type for findUnique actions
   */
  export type pessoasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * Filter, which pessoas to fetch.
     */
    where: pessoasWhereUniqueInput
  }

  /**
   * pessoas findUnique
   */
  export interface pessoasFindUniqueArgs extends pessoasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pessoas findUniqueOrThrow
   */
  export type pessoasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * Filter, which pessoas to fetch.
     */
    where: pessoasWhereUniqueInput
  }


  /**
   * pessoas base type for findFirst actions
   */
  export type pessoasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * Filter, which pessoas to fetch.
     */
    where?: pessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pessoas to fetch.
     */
    orderBy?: Enumerable<pessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pessoas.
     */
    cursor?: pessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pessoas.
     */
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }

  /**
   * pessoas findFirst
   */
  export interface pessoasFindFirstArgs extends pessoasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pessoas findFirstOrThrow
   */
  export type pessoasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * Filter, which pessoas to fetch.
     */
    where?: pessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pessoas to fetch.
     */
    orderBy?: Enumerable<pessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pessoas.
     */
    cursor?: pessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pessoas.
     */
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }


  /**
   * pessoas findMany
   */
  export type pessoasFindManyArgs = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * Filter, which pessoas to fetch.
     */
    where?: pessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pessoas to fetch.
     */
    orderBy?: Enumerable<pessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pessoas.
     */
    cursor?: pessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pessoas.
     */
    skip?: number
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }


  /**
   * pessoas create
   */
  export type pessoasCreateArgs = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * The data needed to create a pessoas.
     */
    data: XOR<pessoasCreateInput, pessoasUncheckedCreateInput>
  }


  /**
   * pessoas createMany
   */
  export type pessoasCreateManyArgs = {
    /**
     * The data used to create many pessoas.
     */
    data: Enumerable<pessoasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * pessoas update
   */
  export type pessoasUpdateArgs = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * The data needed to update a pessoas.
     */
    data: XOR<pessoasUpdateInput, pessoasUncheckedUpdateInput>
    /**
     * Choose, which pessoas to update.
     */
    where: pessoasWhereUniqueInput
  }


  /**
   * pessoas updateMany
   */
  export type pessoasUpdateManyArgs = {
    /**
     * The data used to update pessoas.
     */
    data: XOR<pessoasUpdateManyMutationInput, pessoasUncheckedUpdateManyInput>
    /**
     * Filter which pessoas to update
     */
    where?: pessoasWhereInput
  }


  /**
   * pessoas upsert
   */
  export type pessoasUpsertArgs = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * The filter to search for the pessoas to update in case it exists.
     */
    where: pessoasWhereUniqueInput
    /**
     * In case the pessoas found by the `where` argument doesn't exist, create a new pessoas with this data.
     */
    create: XOR<pessoasCreateInput, pessoasUncheckedCreateInput>
    /**
     * In case the pessoas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pessoasUpdateInput, pessoasUncheckedUpdateInput>
  }


  /**
   * pessoas delete
   */
  export type pessoasDeleteArgs = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
    /**
     * Filter which pessoas to delete.
     */
    where: pessoasWhereUniqueInput
  }


  /**
   * pessoas deleteMany
   */
  export type pessoasDeleteManyArgs = {
    /**
     * Filter which pessoas to delete
     */
    where?: pessoasWhereInput
  }


  /**
   * pessoas without action
   */
  export type pessoasArgs = {
    /**
     * Select specific fields to fetch from the pessoas
     */
    select?: pessoasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pessoasInclude | null
  }



  /**
   * Model voluntarios
   */


  export type AggregateVoluntarios = {
    _count: VoluntariosCountAggregateOutputType | null
    _min: VoluntariosMinAggregateOutputType | null
    _max: VoluntariosMaxAggregateOutputType | null
  }

  export type VoluntariosMinAggregateOutputType = {
    cpf_vol: string | null
    disponibilidade: voluntarios_disponibilidade | null
    transporte: voluntarios_transporte | null
    funcao: voluntarios_funcao | null
  }

  export type VoluntariosMaxAggregateOutputType = {
    cpf_vol: string | null
    disponibilidade: voluntarios_disponibilidade | null
    transporte: voluntarios_transporte | null
    funcao: voluntarios_funcao | null
  }

  export type VoluntariosCountAggregateOutputType = {
    cpf_vol: number
    disponibilidade: number
    transporte: number
    funcao: number
    _all: number
  }


  export type VoluntariosMinAggregateInputType = {
    cpf_vol?: true
    disponibilidade?: true
    transporte?: true
    funcao?: true
  }

  export type VoluntariosMaxAggregateInputType = {
    cpf_vol?: true
    disponibilidade?: true
    transporte?: true
    funcao?: true
  }

  export type VoluntariosCountAggregateInputType = {
    cpf_vol?: true
    disponibilidade?: true
    transporte?: true
    funcao?: true
    _all?: true
  }

  export type VoluntariosAggregateArgs = {
    /**
     * Filter which voluntarios to aggregate.
     */
    where?: voluntariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voluntarios to fetch.
     */
    orderBy?: Enumerable<voluntariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: voluntariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voluntarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voluntarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned voluntarios
    **/
    _count?: true | VoluntariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoluntariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoluntariosMaxAggregateInputType
  }

  export type GetVoluntariosAggregateType<T extends VoluntariosAggregateArgs> = {
        [P in keyof T & keyof AggregateVoluntarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoluntarios[P]>
      : GetScalarType<T[P], AggregateVoluntarios[P]>
  }




  export type VoluntariosGroupByArgs = {
    where?: voluntariosWhereInput
    orderBy?: Enumerable<voluntariosOrderByWithAggregationInput>
    by: VoluntariosScalarFieldEnum[]
    having?: voluntariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoluntariosCountAggregateInputType | true
    _min?: VoluntariosMinAggregateInputType
    _max?: VoluntariosMaxAggregateInputType
  }


  export type VoluntariosGroupByOutputType = {
    cpf_vol: string
    disponibilidade: voluntarios_disponibilidade
    transporte: voluntarios_transporte
    funcao: voluntarios_funcao
    _count: VoluntariosCountAggregateOutputType | null
    _min: VoluntariosMinAggregateOutputType | null
    _max: VoluntariosMaxAggregateOutputType | null
  }

  type GetVoluntariosGroupByPayload<T extends VoluntariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VoluntariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoluntariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoluntariosGroupByOutputType[P]>
            : GetScalarType<T[P], VoluntariosGroupByOutputType[P]>
        }
      >
    >


  export type voluntariosSelect = {
    cpf_vol?: boolean
    disponibilidade?: boolean
    transporte?: boolean
    funcao?: boolean
    pessoas?: boolean | pessoasArgs
  }


  export type voluntariosInclude = {
    pessoas?: boolean | pessoasArgs
  }

  export type voluntariosGetPayload<S extends boolean | null | undefined | voluntariosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? voluntarios :
    S extends undefined ? never :
    S extends { include: any } & (voluntariosArgs | voluntariosFindManyArgs)
    ? voluntarios  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pessoas' ? pessoasGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (voluntariosArgs | voluntariosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pessoas' ? pessoasGetPayload<S['select'][P]> :  P extends keyof voluntarios ? voluntarios[P] : never
  } 
      : voluntarios


  type voluntariosCountArgs = 
    Omit<voluntariosFindManyArgs, 'select' | 'include'> & {
      select?: VoluntariosCountAggregateInputType | true
    }

  export interface voluntariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Voluntarios that matches the filter.
     * @param {voluntariosFindUniqueArgs} args - Arguments to find a Voluntarios
     * @example
     * // Get one Voluntarios
     * const voluntarios = await prisma.voluntarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends voluntariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, voluntariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'voluntarios'> extends True ? Prisma__voluntariosClient<voluntariosGetPayload<T>> : Prisma__voluntariosClient<voluntariosGetPayload<T> | null, null>

    /**
     * Find one Voluntarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {voluntariosFindUniqueOrThrowArgs} args - Arguments to find a Voluntarios
     * @example
     * // Get one Voluntarios
     * const voluntarios = await prisma.voluntarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends voluntariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, voluntariosFindUniqueOrThrowArgs>
    ): Prisma__voluntariosClient<voluntariosGetPayload<T>>

    /**
     * Find the first Voluntarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voluntariosFindFirstArgs} args - Arguments to find a Voluntarios
     * @example
     * // Get one Voluntarios
     * const voluntarios = await prisma.voluntarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends voluntariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, voluntariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'voluntarios'> extends True ? Prisma__voluntariosClient<voluntariosGetPayload<T>> : Prisma__voluntariosClient<voluntariosGetPayload<T> | null, null>

    /**
     * Find the first Voluntarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voluntariosFindFirstOrThrowArgs} args - Arguments to find a Voluntarios
     * @example
     * // Get one Voluntarios
     * const voluntarios = await prisma.voluntarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends voluntariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, voluntariosFindFirstOrThrowArgs>
    ): Prisma__voluntariosClient<voluntariosGetPayload<T>>

    /**
     * Find zero or more Voluntarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voluntariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Voluntarios
     * const voluntarios = await prisma.voluntarios.findMany()
     * 
     * // Get first 10 Voluntarios
     * const voluntarios = await prisma.voluntarios.findMany({ take: 10 })
     * 
     * // Only select the `cpf_vol`
     * const voluntariosWithCpf_volOnly = await prisma.voluntarios.findMany({ select: { cpf_vol: true } })
     * 
    **/
    findMany<T extends voluntariosFindManyArgs>(
      args?: SelectSubset<T, voluntariosFindManyArgs>
    ): Prisma.PrismaPromise<Array<voluntariosGetPayload<T>>>

    /**
     * Create a Voluntarios.
     * @param {voluntariosCreateArgs} args - Arguments to create a Voluntarios.
     * @example
     * // Create one Voluntarios
     * const Voluntarios = await prisma.voluntarios.create({
     *   data: {
     *     // ... data to create a Voluntarios
     *   }
     * })
     * 
    **/
    create<T extends voluntariosCreateArgs>(
      args: SelectSubset<T, voluntariosCreateArgs>
    ): Prisma__voluntariosClient<voluntariosGetPayload<T>>

    /**
     * Create many Voluntarios.
     *     @param {voluntariosCreateManyArgs} args - Arguments to create many Voluntarios.
     *     @example
     *     // Create many Voluntarios
     *     const voluntarios = await prisma.voluntarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends voluntariosCreateManyArgs>(
      args?: SelectSubset<T, voluntariosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Voluntarios.
     * @param {voluntariosDeleteArgs} args - Arguments to delete one Voluntarios.
     * @example
     * // Delete one Voluntarios
     * const Voluntarios = await prisma.voluntarios.delete({
     *   where: {
     *     // ... filter to delete one Voluntarios
     *   }
     * })
     * 
    **/
    delete<T extends voluntariosDeleteArgs>(
      args: SelectSubset<T, voluntariosDeleteArgs>
    ): Prisma__voluntariosClient<voluntariosGetPayload<T>>

    /**
     * Update one Voluntarios.
     * @param {voluntariosUpdateArgs} args - Arguments to update one Voluntarios.
     * @example
     * // Update one Voluntarios
     * const voluntarios = await prisma.voluntarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends voluntariosUpdateArgs>(
      args: SelectSubset<T, voluntariosUpdateArgs>
    ): Prisma__voluntariosClient<voluntariosGetPayload<T>>

    /**
     * Delete zero or more Voluntarios.
     * @param {voluntariosDeleteManyArgs} args - Arguments to filter Voluntarios to delete.
     * @example
     * // Delete a few Voluntarios
     * const { count } = await prisma.voluntarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends voluntariosDeleteManyArgs>(
      args?: SelectSubset<T, voluntariosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Voluntarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voluntariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Voluntarios
     * const voluntarios = await prisma.voluntarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends voluntariosUpdateManyArgs>(
      args: SelectSubset<T, voluntariosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Voluntarios.
     * @param {voluntariosUpsertArgs} args - Arguments to update or create a Voluntarios.
     * @example
     * // Update or create a Voluntarios
     * const voluntarios = await prisma.voluntarios.upsert({
     *   create: {
     *     // ... data to create a Voluntarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Voluntarios we want to update
     *   }
     * })
    **/
    upsert<T extends voluntariosUpsertArgs>(
      args: SelectSubset<T, voluntariosUpsertArgs>
    ): Prisma__voluntariosClient<voluntariosGetPayload<T>>

    /**
     * Count the number of Voluntarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voluntariosCountArgs} args - Arguments to filter Voluntarios to count.
     * @example
     * // Count the number of Voluntarios
     * const count = await prisma.voluntarios.count({
     *   where: {
     *     // ... the filter for the Voluntarios we want to count
     *   }
     * })
    **/
    count<T extends voluntariosCountArgs>(
      args?: Subset<T, voluntariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoluntariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Voluntarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoluntariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoluntariosAggregateArgs>(args: Subset<T, VoluntariosAggregateArgs>): Prisma.PrismaPromise<GetVoluntariosAggregateType<T>>

    /**
     * Group by Voluntarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoluntariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoluntariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoluntariosGroupByArgs['orderBy'] }
        : { orderBy?: VoluntariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoluntariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoluntariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for voluntarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__voluntariosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pessoas<T extends pessoasArgs= {}>(args?: Subset<T, pessoasArgs>): Prisma__pessoasClient<pessoasGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * voluntarios base type for findUnique actions
   */
  export type voluntariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * Filter, which voluntarios to fetch.
     */
    where: voluntariosWhereUniqueInput
  }

  /**
   * voluntarios findUnique
   */
  export interface voluntariosFindUniqueArgs extends voluntariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * voluntarios findUniqueOrThrow
   */
  export type voluntariosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * Filter, which voluntarios to fetch.
     */
    where: voluntariosWhereUniqueInput
  }


  /**
   * voluntarios base type for findFirst actions
   */
  export type voluntariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * Filter, which voluntarios to fetch.
     */
    where?: voluntariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voluntarios to fetch.
     */
    orderBy?: Enumerable<voluntariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for voluntarios.
     */
    cursor?: voluntariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voluntarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voluntarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of voluntarios.
     */
    distinct?: Enumerable<VoluntariosScalarFieldEnum>
  }

  /**
   * voluntarios findFirst
   */
  export interface voluntariosFindFirstArgs extends voluntariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * voluntarios findFirstOrThrow
   */
  export type voluntariosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * Filter, which voluntarios to fetch.
     */
    where?: voluntariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voluntarios to fetch.
     */
    orderBy?: Enumerable<voluntariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for voluntarios.
     */
    cursor?: voluntariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voluntarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voluntarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of voluntarios.
     */
    distinct?: Enumerable<VoluntariosScalarFieldEnum>
  }


  /**
   * voluntarios findMany
   */
  export type voluntariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * Filter, which voluntarios to fetch.
     */
    where?: voluntariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voluntarios to fetch.
     */
    orderBy?: Enumerable<voluntariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing voluntarios.
     */
    cursor?: voluntariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voluntarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voluntarios.
     */
    skip?: number
    distinct?: Enumerable<VoluntariosScalarFieldEnum>
  }


  /**
   * voluntarios create
   */
  export type voluntariosCreateArgs = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * The data needed to create a voluntarios.
     */
    data: XOR<voluntariosCreateInput, voluntariosUncheckedCreateInput>
  }


  /**
   * voluntarios createMany
   */
  export type voluntariosCreateManyArgs = {
    /**
     * The data used to create many voluntarios.
     */
    data: Enumerable<voluntariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * voluntarios update
   */
  export type voluntariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * The data needed to update a voluntarios.
     */
    data: XOR<voluntariosUpdateInput, voluntariosUncheckedUpdateInput>
    /**
     * Choose, which voluntarios to update.
     */
    where: voluntariosWhereUniqueInput
  }


  /**
   * voluntarios updateMany
   */
  export type voluntariosUpdateManyArgs = {
    /**
     * The data used to update voluntarios.
     */
    data: XOR<voluntariosUpdateManyMutationInput, voluntariosUncheckedUpdateManyInput>
    /**
     * Filter which voluntarios to update
     */
    where?: voluntariosWhereInput
  }


  /**
   * voluntarios upsert
   */
  export type voluntariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * The filter to search for the voluntarios to update in case it exists.
     */
    where: voluntariosWhereUniqueInput
    /**
     * In case the voluntarios found by the `where` argument doesn't exist, create a new voluntarios with this data.
     */
    create: XOR<voluntariosCreateInput, voluntariosUncheckedCreateInput>
    /**
     * In case the voluntarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<voluntariosUpdateInput, voluntariosUncheckedUpdateInput>
  }


  /**
   * voluntarios delete
   */
  export type voluntariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
    /**
     * Filter which voluntarios to delete.
     */
    where: voluntariosWhereUniqueInput
  }


  /**
   * voluntarios deleteMany
   */
  export type voluntariosDeleteManyArgs = {
    /**
     * Filter which voluntarios to delete
     */
    where?: voluntariosWhereInput
  }


  /**
   * voluntarios without action
   */
  export type voluntariosArgs = {
    /**
     * Select specific fields to fetch from the voluntarios
     */
    select?: voluntariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: voluntariosInclude | null
  }



  /**
   * Enums
   */

  export const AdotanteScalarFieldEnum: {
    cpf_adot: 'cpf_adot',
    rendafixa: 'rendafixa',
    aceitacaoAnimal: 'aceitacaoAnimal',
    animaisAtuais: 'animaisAtuais',
    animaisAntigos: 'animaisAntigos',
    descMoradores: 'descMoradores',
    motivacao: 'motivacao'
  };

  export type AdotanteScalarFieldEnum = (typeof AdotanteScalarFieldEnum)[keyof typeof AdotanteScalarFieldEnum]


  export const AnimaisScalarFieldEnum: {
    id_animal: 'id_animal',
    cnpj_pet: 'cnpj_pet',
    especie: 'especie',
    sexo: 'sexo',
    porte: 'porte',
    idade: 'idade',
    pelagem: 'pelagem',
    cor: 'cor',
    deficiencia: 'deficiencia',
    vacinas: 'vacinas',
    descricao: 'descricao',
    foto: 'foto'
  };

  export type AnimaisScalarFieldEnum = (typeof AnimaisScalarFieldEnum)[keyof typeof AnimaisScalarFieldEnum]


  export const Conta_banco_ongScalarFieldEnum: {
    cnpj: 'cnpj',
    numConta: 'numConta',
    agencia: 'agencia',
    operacao: 'operacao',
    pix: 'pix',
    qrcode: 'qrcode'
  };

  export type Conta_banco_ongScalarFieldEnum = (typeof Conta_banco_ongScalarFieldEnum)[keyof typeof Conta_banco_ongScalarFieldEnum]


  export const Endereco_ongScalarFieldEnum: {
    cnpj_end: 'cnpj_end',
    cep: 'cep',
    cidade: 'cidade',
    bairro: 'bairro',
    rua: 'rua',
    numero: 'numero'
  };

  export type Endereco_ongScalarFieldEnum = (typeof Endereco_ongScalarFieldEnum)[keyof typeof Endereco_ongScalarFieldEnum]


  export const Endereco_pessoasScalarFieldEnum: {
    cpf_end: 'cpf_end',
    cidade: 'cidade',
    bairro: 'bairro',
    rua: 'rua',
    numero: 'numero',
    tipoMoradia: 'tipoMoradia'
  };

  export type Endereco_pessoasScalarFieldEnum = (typeof Endereco_pessoasScalarFieldEnum)[keyof typeof Endereco_pessoasScalarFieldEnum]


  export const OngScalarFieldEnum: {
    cnpj: 'cnpj',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    facebook: 'facebook',
    whatsapp: 'whatsapp',
    descricao_ong: 'descricao_ong',
    foto: 'foto'
  };

  export type OngScalarFieldEnum = (typeof OngScalarFieldEnum)[keyof typeof OngScalarFieldEnum]


  export const PessoasScalarFieldEnum: {
    cpf: 'cpf',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone'
  };

  export type PessoasScalarFieldEnum = (typeof PessoasScalarFieldEnum)[keyof typeof PessoasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VoluntariosScalarFieldEnum: {
    cpf_vol: 'cpf_vol',
    disponibilidade: 'disponibilidade',
    transporte: 'transporte',
    funcao: 'funcao'
  };

  export type VoluntariosScalarFieldEnum = (typeof VoluntariosScalarFieldEnum)[keyof typeof VoluntariosScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type adotanteWhereInput = {
    AND?: Enumerable<adotanteWhereInput>
    OR?: Enumerable<adotanteWhereInput>
    NOT?: Enumerable<adotanteWhereInput>
    cpf_adot?: StringFilter | string
    rendafixa?: Enumadotante_rendafixaFilter | adotante_rendafixa
    aceitacaoAnimal?: Enumadotante_aceitacaoAnimalFilter | adotante_aceitacaoAnimal
    animaisAtuais?: StringFilter | string
    animaisAntigos?: StringFilter | string
    descMoradores?: StringFilter | string
    motivacao?: StringFilter | string
    pessoas?: XOR<PessoasRelationFilter, pessoasWhereInput>
  }

  export type adotanteOrderByWithRelationInput = {
    cpf_adot?: SortOrder
    rendafixa?: SortOrder
    aceitacaoAnimal?: SortOrder
    animaisAtuais?: SortOrder
    animaisAntigos?: SortOrder
    descMoradores?: SortOrder
    motivacao?: SortOrder
    pessoas?: pessoasOrderByWithRelationInput
  }

  export type adotanteWhereUniqueInput = {
    cpf_adot?: string
  }

  export type adotanteOrderByWithAggregationInput = {
    cpf_adot?: SortOrder
    rendafixa?: SortOrder
    aceitacaoAnimal?: SortOrder
    animaisAtuais?: SortOrder
    animaisAntigos?: SortOrder
    descMoradores?: SortOrder
    motivacao?: SortOrder
    _count?: adotanteCountOrderByAggregateInput
    _max?: adotanteMaxOrderByAggregateInput
    _min?: adotanteMinOrderByAggregateInput
  }

  export type adotanteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<adotanteScalarWhereWithAggregatesInput>
    OR?: Enumerable<adotanteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<adotanteScalarWhereWithAggregatesInput>
    cpf_adot?: StringWithAggregatesFilter | string
    rendafixa?: Enumadotante_rendafixaWithAggregatesFilter | adotante_rendafixa
    aceitacaoAnimal?: Enumadotante_aceitacaoAnimalWithAggregatesFilter | adotante_aceitacaoAnimal
    animaisAtuais?: StringWithAggregatesFilter | string
    animaisAntigos?: StringWithAggregatesFilter | string
    descMoradores?: StringWithAggregatesFilter | string
    motivacao?: StringWithAggregatesFilter | string
  }

  export type animaisWhereInput = {
    AND?: Enumerable<animaisWhereInput>
    OR?: Enumerable<animaisWhereInput>
    NOT?: Enumerable<animaisWhereInput>
    id_animal?: IntFilter | number
    cnpj_pet?: StringFilter | string
    especie?: Enumanimais_especieFilter | animais_especie
    sexo?: Enumanimais_sexoFilter | animais_sexo
    porte?: Enumanimais_porteFilter | animais_porte
    idade?: Enumanimais_idadeFilter | animais_idade
    pelagem?: Enumanimais_pelagemFilter | animais_pelagem
    cor?: StringFilter | string
    deficiencia?: StringNullableFilter | string | null
    vacinas?: StringFilter | string
    descricao?: StringNullableFilter | string | null
    foto?: BytesFilter | Buffer
    ong?: XOR<OngRelationFilter, ongWhereInput>
  }

  export type animaisOrderByWithRelationInput = {
    id_animal?: SortOrder
    cnpj_pet?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    porte?: SortOrder
    idade?: SortOrder
    pelagem?: SortOrder
    cor?: SortOrder
    deficiencia?: SortOrder
    vacinas?: SortOrder
    descricao?: SortOrder
    foto?: SortOrder
    ong?: ongOrderByWithRelationInput
  }

  export type animaisWhereUniqueInput = {
    id_animal?: number
  }

  export type animaisOrderByWithAggregationInput = {
    id_animal?: SortOrder
    cnpj_pet?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    porte?: SortOrder
    idade?: SortOrder
    pelagem?: SortOrder
    cor?: SortOrder
    deficiencia?: SortOrder
    vacinas?: SortOrder
    descricao?: SortOrder
    foto?: SortOrder
    _count?: animaisCountOrderByAggregateInput
    _avg?: animaisAvgOrderByAggregateInput
    _max?: animaisMaxOrderByAggregateInput
    _min?: animaisMinOrderByAggregateInput
    _sum?: animaisSumOrderByAggregateInput
  }

  export type animaisScalarWhereWithAggregatesInput = {
    AND?: Enumerable<animaisScalarWhereWithAggregatesInput>
    OR?: Enumerable<animaisScalarWhereWithAggregatesInput>
    NOT?: Enumerable<animaisScalarWhereWithAggregatesInput>
    id_animal?: IntWithAggregatesFilter | number
    cnpj_pet?: StringWithAggregatesFilter | string
    especie?: Enumanimais_especieWithAggregatesFilter | animais_especie
    sexo?: Enumanimais_sexoWithAggregatesFilter | animais_sexo
    porte?: Enumanimais_porteWithAggregatesFilter | animais_porte
    idade?: Enumanimais_idadeWithAggregatesFilter | animais_idade
    pelagem?: Enumanimais_pelagemWithAggregatesFilter | animais_pelagem
    cor?: StringWithAggregatesFilter | string
    deficiencia?: StringNullableWithAggregatesFilter | string | null
    vacinas?: StringWithAggregatesFilter | string
    descricao?: StringNullableWithAggregatesFilter | string | null
    foto?: BytesWithAggregatesFilter | Buffer
  }

  export type conta_banco_ongWhereInput = {
    AND?: Enumerable<conta_banco_ongWhereInput>
    OR?: Enumerable<conta_banco_ongWhereInput>
    NOT?: Enumerable<conta_banco_ongWhereInput>
    cnpj?: StringFilter | string
    numConta?: StringFilter | string
    agencia?: StringFilter | string
    operacao?: StringNullableFilter | string | null
    pix?: StringFilter | string
    qrcode?: BytesNullableFilter | Buffer | null
    ong?: XOR<OngRelationFilter, ongWhereInput>
  }

  export type conta_banco_ongOrderByWithRelationInput = {
    cnpj?: SortOrder
    numConta?: SortOrder
    agencia?: SortOrder
    operacao?: SortOrder
    pix?: SortOrder
    qrcode?: SortOrder
    ong?: ongOrderByWithRelationInput
  }

  export type conta_banco_ongWhereUniqueInput = {
    cnpj?: string
  }

  export type conta_banco_ongOrderByWithAggregationInput = {
    cnpj?: SortOrder
    numConta?: SortOrder
    agencia?: SortOrder
    operacao?: SortOrder
    pix?: SortOrder
    qrcode?: SortOrder
    _count?: conta_banco_ongCountOrderByAggregateInput
    _max?: conta_banco_ongMaxOrderByAggregateInput
    _min?: conta_banco_ongMinOrderByAggregateInput
  }

  export type conta_banco_ongScalarWhereWithAggregatesInput = {
    AND?: Enumerable<conta_banco_ongScalarWhereWithAggregatesInput>
    OR?: Enumerable<conta_banco_ongScalarWhereWithAggregatesInput>
    NOT?: Enumerable<conta_banco_ongScalarWhereWithAggregatesInput>
    cnpj?: StringWithAggregatesFilter | string
    numConta?: StringWithAggregatesFilter | string
    agencia?: StringWithAggregatesFilter | string
    operacao?: StringNullableWithAggregatesFilter | string | null
    pix?: StringWithAggregatesFilter | string
    qrcode?: BytesNullableWithAggregatesFilter | Buffer | null
  }

  export type endereco_ongWhereInput = {
    AND?: Enumerable<endereco_ongWhereInput>
    OR?: Enumerable<endereco_ongWhereInput>
    NOT?: Enumerable<endereco_ongWhereInput>
    cnpj_end?: StringFilter | string
    cep?: StringFilter | string
    cidade?: StringFilter | string
    bairro?: StringFilter | string
    rua?: StringFilter | string
    numero?: StringFilter | string
    ong?: XOR<OngRelationFilter, ongWhereInput>
  }

  export type endereco_ongOrderByWithRelationInput = {
    cnpj_end?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    ong?: ongOrderByWithRelationInput
  }

  export type endereco_ongWhereUniqueInput = {
    cnpj_end?: string
  }

  export type endereco_ongOrderByWithAggregationInput = {
    cnpj_end?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    _count?: endereco_ongCountOrderByAggregateInput
    _max?: endereco_ongMaxOrderByAggregateInput
    _min?: endereco_ongMinOrderByAggregateInput
  }

  export type endereco_ongScalarWhereWithAggregatesInput = {
    AND?: Enumerable<endereco_ongScalarWhereWithAggregatesInput>
    OR?: Enumerable<endereco_ongScalarWhereWithAggregatesInput>
    NOT?: Enumerable<endereco_ongScalarWhereWithAggregatesInput>
    cnpj_end?: StringWithAggregatesFilter | string
    cep?: StringWithAggregatesFilter | string
    cidade?: StringWithAggregatesFilter | string
    bairro?: StringWithAggregatesFilter | string
    rua?: StringWithAggregatesFilter | string
    numero?: StringWithAggregatesFilter | string
  }

  export type endereco_pessoasWhereInput = {
    AND?: Enumerable<endereco_pessoasWhereInput>
    OR?: Enumerable<endereco_pessoasWhereInput>
    NOT?: Enumerable<endereco_pessoasWhereInput>
    cpf_end?: StringFilter | string
    cidade?: StringFilter | string
    bairro?: StringFilter | string
    rua?: StringFilter | string
    numero?: StringFilter | string
    tipoMoradia?: StringFilter | string
    pessoas?: XOR<PessoasRelationFilter, pessoasWhereInput>
  }

  export type endereco_pessoasOrderByWithRelationInput = {
    cpf_end?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    tipoMoradia?: SortOrder
    pessoas?: pessoasOrderByWithRelationInput
  }

  export type endereco_pessoasWhereUniqueInput = {
    cpf_end?: string
  }

  export type endereco_pessoasOrderByWithAggregationInput = {
    cpf_end?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    tipoMoradia?: SortOrder
    _count?: endereco_pessoasCountOrderByAggregateInput
    _max?: endereco_pessoasMaxOrderByAggregateInput
    _min?: endereco_pessoasMinOrderByAggregateInput
  }

  export type endereco_pessoasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<endereco_pessoasScalarWhereWithAggregatesInput>
    OR?: Enumerable<endereco_pessoasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<endereco_pessoasScalarWhereWithAggregatesInput>
    cpf_end?: StringWithAggregatesFilter | string
    cidade?: StringWithAggregatesFilter | string
    bairro?: StringWithAggregatesFilter | string
    rua?: StringWithAggregatesFilter | string
    numero?: StringWithAggregatesFilter | string
    tipoMoradia?: StringWithAggregatesFilter | string
  }

  export type ongWhereInput = {
    AND?: Enumerable<ongWhereInput>
    OR?: Enumerable<ongWhereInput>
    NOT?: Enumerable<ongWhereInput>
    cnpj?: StringFilter | string
    nome?: StringFilter | string
    email?: StringFilter | string
    senha?: StringFilter | string
    facebook?: StringNullableFilter | string | null
    whatsapp?: StringNullableFilter | string | null
    descricao_ong?: StringFilter | string
    foto?: BytesFilter | Buffer
    animais?: AnimaisListRelationFilter
    conta_banco_ong?: XOR<Conta_banco_ongRelationFilter, conta_banco_ongWhereInput> | null
    endereco_ong?: XOR<Endereco_ongRelationFilter, endereco_ongWhereInput> | null
  }

  export type ongOrderByWithRelationInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    facebook?: SortOrder
    whatsapp?: SortOrder
    descricao_ong?: SortOrder
    foto?: SortOrder
    animais?: animaisOrderByRelationAggregateInput
    conta_banco_ong?: conta_banco_ongOrderByWithRelationInput
    endereco_ong?: endereco_ongOrderByWithRelationInput
  }

  export type ongWhereUniqueInput = {
    cnpj?: string
  }

  export type ongOrderByWithAggregationInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    facebook?: SortOrder
    whatsapp?: SortOrder
    descricao_ong?: SortOrder
    foto?: SortOrder
    _count?: ongCountOrderByAggregateInput
    _max?: ongMaxOrderByAggregateInput
    _min?: ongMinOrderByAggregateInput
  }

  export type ongScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ongScalarWhereWithAggregatesInput>
    OR?: Enumerable<ongScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ongScalarWhereWithAggregatesInput>
    cnpj?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    senha?: StringWithAggregatesFilter | string
    facebook?: StringNullableWithAggregatesFilter | string | null
    whatsapp?: StringNullableWithAggregatesFilter | string | null
    descricao_ong?: StringWithAggregatesFilter | string
    foto?: BytesWithAggregatesFilter | Buffer
  }

  export type pessoasWhereInput = {
    AND?: Enumerable<pessoasWhereInput>
    OR?: Enumerable<pessoasWhereInput>
    NOT?: Enumerable<pessoasWhereInput>
    cpf?: StringFilter | string
    nome?: StringFilter | string
    email?: StringFilter | string
    telefone?: StringFilter | string
    adotante?: XOR<AdotanteRelationFilter, adotanteWhereInput> | null
    endereco_pessoas?: XOR<Endereco_pessoasRelationFilter, endereco_pessoasWhereInput> | null
    voluntarios?: XOR<VoluntariosRelationFilter, voluntariosWhereInput> | null
  }

  export type pessoasOrderByWithRelationInput = {
    cpf?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    adotante?: adotanteOrderByWithRelationInput
    endereco_pessoas?: endereco_pessoasOrderByWithRelationInput
    voluntarios?: voluntariosOrderByWithRelationInput
  }

  export type pessoasWhereUniqueInput = {
    cpf?: string
  }

  export type pessoasOrderByWithAggregationInput = {
    cpf?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    _count?: pessoasCountOrderByAggregateInput
    _max?: pessoasMaxOrderByAggregateInput
    _min?: pessoasMinOrderByAggregateInput
  }

  export type pessoasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<pessoasScalarWhereWithAggregatesInput>
    OR?: Enumerable<pessoasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<pessoasScalarWhereWithAggregatesInput>
    cpf?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    telefone?: StringWithAggregatesFilter | string
  }

  export type voluntariosWhereInput = {
    AND?: Enumerable<voluntariosWhereInput>
    OR?: Enumerable<voluntariosWhereInput>
    NOT?: Enumerable<voluntariosWhereInput>
    cpf_vol?: StringFilter | string
    disponibilidade?: Enumvoluntarios_disponibilidadeFilter | voluntarios_disponibilidade
    transporte?: Enumvoluntarios_transporteFilter | voluntarios_transporte
    funcao?: Enumvoluntarios_funcaoFilter | voluntarios_funcao
    pessoas?: XOR<PessoasRelationFilter, pessoasWhereInput>
  }

  export type voluntariosOrderByWithRelationInput = {
    cpf_vol?: SortOrder
    disponibilidade?: SortOrder
    transporte?: SortOrder
    funcao?: SortOrder
    pessoas?: pessoasOrderByWithRelationInput
  }

  export type voluntariosWhereUniqueInput = {
    cpf_vol?: string
  }

  export type voluntariosOrderByWithAggregationInput = {
    cpf_vol?: SortOrder
    disponibilidade?: SortOrder
    transporte?: SortOrder
    funcao?: SortOrder
    _count?: voluntariosCountOrderByAggregateInput
    _max?: voluntariosMaxOrderByAggregateInput
    _min?: voluntariosMinOrderByAggregateInput
  }

  export type voluntariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<voluntariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<voluntariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<voluntariosScalarWhereWithAggregatesInput>
    cpf_vol?: StringWithAggregatesFilter | string
    disponibilidade?: Enumvoluntarios_disponibilidadeWithAggregatesFilter | voluntarios_disponibilidade
    transporte?: Enumvoluntarios_transporteWithAggregatesFilter | voluntarios_transporte
    funcao?: Enumvoluntarios_funcaoWithAggregatesFilter | voluntarios_funcao
  }

  export type adotanteCreateInput = {
    rendafixa: adotante_rendafixa
    aceitacaoAnimal: adotante_aceitacaoAnimal
    animaisAtuais: string
    animaisAntigos: string
    descMoradores: string
    motivacao: string
    pessoas: pessoasCreateNestedOneWithoutAdotanteInput
  }

  export type adotanteUncheckedCreateInput = {
    cpf_adot: string
    rendafixa: adotante_rendafixa
    aceitacaoAnimal: adotante_aceitacaoAnimal
    animaisAtuais: string
    animaisAntigos: string
    descMoradores: string
    motivacao: string
  }

  export type adotanteUpdateInput = {
    rendafixa?: Enumadotante_rendafixaFieldUpdateOperationsInput | adotante_rendafixa
    aceitacaoAnimal?: Enumadotante_aceitacaoAnimalFieldUpdateOperationsInput | adotante_aceitacaoAnimal
    animaisAtuais?: StringFieldUpdateOperationsInput | string
    animaisAntigos?: StringFieldUpdateOperationsInput | string
    descMoradores?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
    pessoas?: pessoasUpdateOneRequiredWithoutAdotanteNestedInput
  }

  export type adotanteUncheckedUpdateInput = {
    cpf_adot?: StringFieldUpdateOperationsInput | string
    rendafixa?: Enumadotante_rendafixaFieldUpdateOperationsInput | adotante_rendafixa
    aceitacaoAnimal?: Enumadotante_aceitacaoAnimalFieldUpdateOperationsInput | adotante_aceitacaoAnimal
    animaisAtuais?: StringFieldUpdateOperationsInput | string
    animaisAntigos?: StringFieldUpdateOperationsInput | string
    descMoradores?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
  }

  export type adotanteCreateManyInput = {
    cpf_adot: string
    rendafixa: adotante_rendafixa
    aceitacaoAnimal: adotante_aceitacaoAnimal
    animaisAtuais: string
    animaisAntigos: string
    descMoradores: string
    motivacao: string
  }

  export type adotanteUpdateManyMutationInput = {
    rendafixa?: Enumadotante_rendafixaFieldUpdateOperationsInput | adotante_rendafixa
    aceitacaoAnimal?: Enumadotante_aceitacaoAnimalFieldUpdateOperationsInput | adotante_aceitacaoAnimal
    animaisAtuais?: StringFieldUpdateOperationsInput | string
    animaisAntigos?: StringFieldUpdateOperationsInput | string
    descMoradores?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
  }

  export type adotanteUncheckedUpdateManyInput = {
    cpf_adot?: StringFieldUpdateOperationsInput | string
    rendafixa?: Enumadotante_rendafixaFieldUpdateOperationsInput | adotante_rendafixa
    aceitacaoAnimal?: Enumadotante_aceitacaoAnimalFieldUpdateOperationsInput | adotante_aceitacaoAnimal
    animaisAtuais?: StringFieldUpdateOperationsInput | string
    animaisAntigos?: StringFieldUpdateOperationsInput | string
    descMoradores?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
  }

  export type animaisCreateInput = {
    especie: animais_especie
    sexo: animais_sexo
    porte: animais_porte
    idade: animais_idade
    pelagem: animais_pelagem
    cor: string
    deficiencia?: string | null
    vacinas: string
    descricao?: string | null
    foto: Buffer
    ong: ongCreateNestedOneWithoutAnimaisInput
  }

  export type animaisUncheckedCreateInput = {
    id_animal?: number
    cnpj_pet: string
    especie: animais_especie
    sexo: animais_sexo
    porte: animais_porte
    idade: animais_idade
    pelagem: animais_pelagem
    cor: string
    deficiencia?: string | null
    vacinas: string
    descricao?: string | null
    foto: Buffer
  }

  export type animaisUpdateInput = {
    especie?: Enumanimais_especieFieldUpdateOperationsInput | animais_especie
    sexo?: Enumanimais_sexoFieldUpdateOperationsInput | animais_sexo
    porte?: Enumanimais_porteFieldUpdateOperationsInput | animais_porte
    idade?: Enumanimais_idadeFieldUpdateOperationsInput | animais_idade
    pelagem?: Enumanimais_pelagemFieldUpdateOperationsInput | animais_pelagem
    cor?: StringFieldUpdateOperationsInput | string
    deficiencia?: NullableStringFieldUpdateOperationsInput | string | null
    vacinas?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: BytesFieldUpdateOperationsInput | Buffer
    ong?: ongUpdateOneRequiredWithoutAnimaisNestedInput
  }

  export type animaisUncheckedUpdateInput = {
    id_animal?: IntFieldUpdateOperationsInput | number
    cnpj_pet?: StringFieldUpdateOperationsInput | string
    especie?: Enumanimais_especieFieldUpdateOperationsInput | animais_especie
    sexo?: Enumanimais_sexoFieldUpdateOperationsInput | animais_sexo
    porte?: Enumanimais_porteFieldUpdateOperationsInput | animais_porte
    idade?: Enumanimais_idadeFieldUpdateOperationsInput | animais_idade
    pelagem?: Enumanimais_pelagemFieldUpdateOperationsInput | animais_pelagem
    cor?: StringFieldUpdateOperationsInput | string
    deficiencia?: NullableStringFieldUpdateOperationsInput | string | null
    vacinas?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type animaisCreateManyInput = {
    id_animal?: number
    cnpj_pet: string
    especie: animais_especie
    sexo: animais_sexo
    porte: animais_porte
    idade: animais_idade
    pelagem: animais_pelagem
    cor: string
    deficiencia?: string | null
    vacinas: string
    descricao?: string | null
    foto: Buffer
  }

  export type animaisUpdateManyMutationInput = {
    especie?: Enumanimais_especieFieldUpdateOperationsInput | animais_especie
    sexo?: Enumanimais_sexoFieldUpdateOperationsInput | animais_sexo
    porte?: Enumanimais_porteFieldUpdateOperationsInput | animais_porte
    idade?: Enumanimais_idadeFieldUpdateOperationsInput | animais_idade
    pelagem?: Enumanimais_pelagemFieldUpdateOperationsInput | animais_pelagem
    cor?: StringFieldUpdateOperationsInput | string
    deficiencia?: NullableStringFieldUpdateOperationsInput | string | null
    vacinas?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type animaisUncheckedUpdateManyInput = {
    id_animal?: IntFieldUpdateOperationsInput | number
    cnpj_pet?: StringFieldUpdateOperationsInput | string
    especie?: Enumanimais_especieFieldUpdateOperationsInput | animais_especie
    sexo?: Enumanimais_sexoFieldUpdateOperationsInput | animais_sexo
    porte?: Enumanimais_porteFieldUpdateOperationsInput | animais_porte
    idade?: Enumanimais_idadeFieldUpdateOperationsInput | animais_idade
    pelagem?: Enumanimais_pelagemFieldUpdateOperationsInput | animais_pelagem
    cor?: StringFieldUpdateOperationsInput | string
    deficiencia?: NullableStringFieldUpdateOperationsInput | string | null
    vacinas?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type conta_banco_ongCreateInput = {
    numConta: string
    agencia: string
    operacao?: string | null
    pix: string
    qrcode?: Buffer | null
    ong: ongCreateNestedOneWithoutConta_banco_ongInput
  }

  export type conta_banco_ongUncheckedCreateInput = {
    cnpj: string
    numConta: string
    agencia: string
    operacao?: string | null
    pix: string
    qrcode?: Buffer | null
  }

  export type conta_banco_ongUpdateInput = {
    numConta?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    operacao?: NullableStringFieldUpdateOperationsInput | string | null
    pix?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    ong?: ongUpdateOneRequiredWithoutConta_banco_ongNestedInput
  }

  export type conta_banco_ongUncheckedUpdateInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    numConta?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    operacao?: NullableStringFieldUpdateOperationsInput | string | null
    pix?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type conta_banco_ongCreateManyInput = {
    cnpj: string
    numConta: string
    agencia: string
    operacao?: string | null
    pix: string
    qrcode?: Buffer | null
  }

  export type conta_banco_ongUpdateManyMutationInput = {
    numConta?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    operacao?: NullableStringFieldUpdateOperationsInput | string | null
    pix?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type conta_banco_ongUncheckedUpdateManyInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    numConta?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    operacao?: NullableStringFieldUpdateOperationsInput | string | null
    pix?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type endereco_ongCreateInput = {
    cep: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    ong: ongCreateNestedOneWithoutEndereco_ongInput
  }

  export type endereco_ongUncheckedCreateInput = {
    cnpj_end: string
    cep: string
    cidade: string
    bairro: string
    rua: string
    numero: string
  }

  export type endereco_ongUpdateInput = {
    cep?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    ong?: ongUpdateOneRequiredWithoutEndereco_ongNestedInput
  }

  export type endereco_ongUncheckedUpdateInput = {
    cnpj_end?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type endereco_ongCreateManyInput = {
    cnpj_end: string
    cep: string
    cidade: string
    bairro: string
    rua: string
    numero: string
  }

  export type endereco_ongUpdateManyMutationInput = {
    cep?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type endereco_ongUncheckedUpdateManyInput = {
    cnpj_end?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type endereco_pessoasCreateInput = {
    cidade: string
    bairro: string
    rua: string
    numero: string
    tipoMoradia: string
    pessoas: pessoasCreateNestedOneWithoutEndereco_pessoasInput
  }

  export type endereco_pessoasUncheckedCreateInput = {
    cpf_end: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    tipoMoradia: string
  }

  export type endereco_pessoasUpdateInput = {
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    tipoMoradia?: StringFieldUpdateOperationsInput | string
    pessoas?: pessoasUpdateOneRequiredWithoutEndereco_pessoasNestedInput
  }

  export type endereco_pessoasUncheckedUpdateInput = {
    cpf_end?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    tipoMoradia?: StringFieldUpdateOperationsInput | string
  }

  export type endereco_pessoasCreateManyInput = {
    cpf_end: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    tipoMoradia: string
  }

  export type endereco_pessoasUpdateManyMutationInput = {
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    tipoMoradia?: StringFieldUpdateOperationsInput | string
  }

  export type endereco_pessoasUncheckedUpdateManyInput = {
    cpf_end?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    tipoMoradia?: StringFieldUpdateOperationsInput | string
  }

  export type ongCreateInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
    animais?: animaisCreateNestedManyWithoutOngInput
    conta_banco_ong?: conta_banco_ongCreateNestedOneWithoutOngInput
    endereco_ong?: endereco_ongCreateNestedOneWithoutOngInput
  }

  export type ongUncheckedCreateInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
    animais?: animaisUncheckedCreateNestedManyWithoutOngInput
    conta_banco_ong?: conta_banco_ongUncheckedCreateNestedOneWithoutOngInput
    endereco_ong?: endereco_ongUncheckedCreateNestedOneWithoutOngInput
  }

  export type ongUpdateInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
    animais?: animaisUpdateManyWithoutOngNestedInput
    conta_banco_ong?: conta_banco_ongUpdateOneWithoutOngNestedInput
    endereco_ong?: endereco_ongUpdateOneWithoutOngNestedInput
  }

  export type ongUncheckedUpdateInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
    animais?: animaisUncheckedUpdateManyWithoutOngNestedInput
    conta_banco_ong?: conta_banco_ongUncheckedUpdateOneWithoutOngNestedInput
    endereco_ong?: endereco_ongUncheckedUpdateOneWithoutOngNestedInput
  }

  export type ongCreateManyInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
  }

  export type ongUpdateManyMutationInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type ongUncheckedUpdateManyInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type pessoasCreateInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
    adotante?: adotanteCreateNestedOneWithoutPessoasInput
    endereco_pessoas?: endereco_pessoasCreateNestedOneWithoutPessoasInput
    voluntarios?: voluntariosCreateNestedOneWithoutPessoasInput
  }

  export type pessoasUncheckedCreateInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
    adotante?: adotanteUncheckedCreateNestedOneWithoutPessoasInput
    endereco_pessoas?: endereco_pessoasUncheckedCreateNestedOneWithoutPessoasInput
    voluntarios?: voluntariosUncheckedCreateNestedOneWithoutPessoasInput
  }

  export type pessoasUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    adotante?: adotanteUpdateOneWithoutPessoasNestedInput
    endereco_pessoas?: endereco_pessoasUpdateOneWithoutPessoasNestedInput
    voluntarios?: voluntariosUpdateOneWithoutPessoasNestedInput
  }

  export type pessoasUncheckedUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    adotante?: adotanteUncheckedUpdateOneWithoutPessoasNestedInput
    endereco_pessoas?: endereco_pessoasUncheckedUpdateOneWithoutPessoasNestedInput
    voluntarios?: voluntariosUncheckedUpdateOneWithoutPessoasNestedInput
  }

  export type pessoasCreateManyInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
  }

  export type pessoasUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
  }

  export type pessoasUncheckedUpdateManyInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
  }

  export type voluntariosCreateInput = {
    disponibilidade: voluntarios_disponibilidade
    transporte: voluntarios_transporte
    funcao: voluntarios_funcao
    pessoas: pessoasCreateNestedOneWithoutVoluntariosInput
  }

  export type voluntariosUncheckedCreateInput = {
    cpf_vol: string
    disponibilidade: voluntarios_disponibilidade
    transporte: voluntarios_transporte
    funcao: voluntarios_funcao
  }

  export type voluntariosUpdateInput = {
    disponibilidade?: Enumvoluntarios_disponibilidadeFieldUpdateOperationsInput | voluntarios_disponibilidade
    transporte?: Enumvoluntarios_transporteFieldUpdateOperationsInput | voluntarios_transporte
    funcao?: Enumvoluntarios_funcaoFieldUpdateOperationsInput | voluntarios_funcao
    pessoas?: pessoasUpdateOneRequiredWithoutVoluntariosNestedInput
  }

  export type voluntariosUncheckedUpdateInput = {
    cpf_vol?: StringFieldUpdateOperationsInput | string
    disponibilidade?: Enumvoluntarios_disponibilidadeFieldUpdateOperationsInput | voluntarios_disponibilidade
    transporte?: Enumvoluntarios_transporteFieldUpdateOperationsInput | voluntarios_transporte
    funcao?: Enumvoluntarios_funcaoFieldUpdateOperationsInput | voluntarios_funcao
  }

  export type voluntariosCreateManyInput = {
    cpf_vol: string
    disponibilidade: voluntarios_disponibilidade
    transporte: voluntarios_transporte
    funcao: voluntarios_funcao
  }

  export type voluntariosUpdateManyMutationInput = {
    disponibilidade?: Enumvoluntarios_disponibilidadeFieldUpdateOperationsInput | voluntarios_disponibilidade
    transporte?: Enumvoluntarios_transporteFieldUpdateOperationsInput | voluntarios_transporte
    funcao?: Enumvoluntarios_funcaoFieldUpdateOperationsInput | voluntarios_funcao
  }

  export type voluntariosUncheckedUpdateManyInput = {
    cpf_vol?: StringFieldUpdateOperationsInput | string
    disponibilidade?: Enumvoluntarios_disponibilidadeFieldUpdateOperationsInput | voluntarios_disponibilidade
    transporte?: Enumvoluntarios_transporteFieldUpdateOperationsInput | voluntarios_transporte
    funcao?: Enumvoluntarios_funcaoFieldUpdateOperationsInput | voluntarios_funcao
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type Enumadotante_rendafixaFilter = {
    equals?: adotante_rendafixa
    in?: Enumerable<adotante_rendafixa>
    notIn?: Enumerable<adotante_rendafixa>
    not?: NestedEnumadotante_rendafixaFilter | adotante_rendafixa
  }

  export type Enumadotante_aceitacaoAnimalFilter = {
    equals?: adotante_aceitacaoAnimal
    in?: Enumerable<adotante_aceitacaoAnimal>
    notIn?: Enumerable<adotante_aceitacaoAnimal>
    not?: NestedEnumadotante_aceitacaoAnimalFilter | adotante_aceitacaoAnimal
  }

  export type PessoasRelationFilter = {
    is?: pessoasWhereInput
    isNot?: pessoasWhereInput
  }

  export type adotanteCountOrderByAggregateInput = {
    cpf_adot?: SortOrder
    rendafixa?: SortOrder
    aceitacaoAnimal?: SortOrder
    animaisAtuais?: SortOrder
    animaisAntigos?: SortOrder
    descMoradores?: SortOrder
    motivacao?: SortOrder
  }

  export type adotanteMaxOrderByAggregateInput = {
    cpf_adot?: SortOrder
    rendafixa?: SortOrder
    aceitacaoAnimal?: SortOrder
    animaisAtuais?: SortOrder
    animaisAntigos?: SortOrder
    descMoradores?: SortOrder
    motivacao?: SortOrder
  }

  export type adotanteMinOrderByAggregateInput = {
    cpf_adot?: SortOrder
    rendafixa?: SortOrder
    aceitacaoAnimal?: SortOrder
    animaisAtuais?: SortOrder
    animaisAntigos?: SortOrder
    descMoradores?: SortOrder
    motivacao?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type Enumadotante_rendafixaWithAggregatesFilter = {
    equals?: adotante_rendafixa
    in?: Enumerable<adotante_rendafixa>
    notIn?: Enumerable<adotante_rendafixa>
    not?: NestedEnumadotante_rendafixaWithAggregatesFilter | adotante_rendafixa
    _count?: NestedIntFilter
    _min?: NestedEnumadotante_rendafixaFilter
    _max?: NestedEnumadotante_rendafixaFilter
  }

  export type Enumadotante_aceitacaoAnimalWithAggregatesFilter = {
    equals?: adotante_aceitacaoAnimal
    in?: Enumerable<adotante_aceitacaoAnimal>
    notIn?: Enumerable<adotante_aceitacaoAnimal>
    not?: NestedEnumadotante_aceitacaoAnimalWithAggregatesFilter | adotante_aceitacaoAnimal
    _count?: NestedIntFilter
    _min?: NestedEnumadotante_aceitacaoAnimalFilter
    _max?: NestedEnumadotante_aceitacaoAnimalFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type Enumanimais_especieFilter = {
    equals?: animais_especie
    in?: Enumerable<animais_especie>
    notIn?: Enumerable<animais_especie>
    not?: NestedEnumanimais_especieFilter | animais_especie
  }

  export type Enumanimais_sexoFilter = {
    equals?: animais_sexo
    in?: Enumerable<animais_sexo>
    notIn?: Enumerable<animais_sexo>
    not?: NestedEnumanimais_sexoFilter | animais_sexo
  }

  export type Enumanimais_porteFilter = {
    equals?: animais_porte
    in?: Enumerable<animais_porte>
    notIn?: Enumerable<animais_porte>
    not?: NestedEnumanimais_porteFilter | animais_porte
  }

  export type Enumanimais_idadeFilter = {
    equals?: animais_idade
    in?: Enumerable<animais_idade>
    notIn?: Enumerable<animais_idade>
    not?: NestedEnumanimais_idadeFilter | animais_idade
  }

  export type Enumanimais_pelagemFilter = {
    equals?: animais_pelagem
    in?: Enumerable<animais_pelagem>
    notIn?: Enumerable<animais_pelagem>
    not?: NestedEnumanimais_pelagemFilter | animais_pelagem
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BytesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer> | Buffer
    notIn?: Enumerable<Buffer> | Buffer
    not?: NestedBytesFilter | Buffer
  }

  export type OngRelationFilter = {
    is?: ongWhereInput
    isNot?: ongWhereInput
  }

  export type animaisCountOrderByAggregateInput = {
    id_animal?: SortOrder
    cnpj_pet?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    porte?: SortOrder
    idade?: SortOrder
    pelagem?: SortOrder
    cor?: SortOrder
    deficiencia?: SortOrder
    vacinas?: SortOrder
    descricao?: SortOrder
    foto?: SortOrder
  }

  export type animaisAvgOrderByAggregateInput = {
    id_animal?: SortOrder
  }

  export type animaisMaxOrderByAggregateInput = {
    id_animal?: SortOrder
    cnpj_pet?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    porte?: SortOrder
    idade?: SortOrder
    pelagem?: SortOrder
    cor?: SortOrder
    deficiencia?: SortOrder
    vacinas?: SortOrder
    descricao?: SortOrder
    foto?: SortOrder
  }

  export type animaisMinOrderByAggregateInput = {
    id_animal?: SortOrder
    cnpj_pet?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    porte?: SortOrder
    idade?: SortOrder
    pelagem?: SortOrder
    cor?: SortOrder
    deficiencia?: SortOrder
    vacinas?: SortOrder
    descricao?: SortOrder
    foto?: SortOrder
  }

  export type animaisSumOrderByAggregateInput = {
    id_animal?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type Enumanimais_especieWithAggregatesFilter = {
    equals?: animais_especie
    in?: Enumerable<animais_especie>
    notIn?: Enumerable<animais_especie>
    not?: NestedEnumanimais_especieWithAggregatesFilter | animais_especie
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_especieFilter
    _max?: NestedEnumanimais_especieFilter
  }

  export type Enumanimais_sexoWithAggregatesFilter = {
    equals?: animais_sexo
    in?: Enumerable<animais_sexo>
    notIn?: Enumerable<animais_sexo>
    not?: NestedEnumanimais_sexoWithAggregatesFilter | animais_sexo
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_sexoFilter
    _max?: NestedEnumanimais_sexoFilter
  }

  export type Enumanimais_porteWithAggregatesFilter = {
    equals?: animais_porte
    in?: Enumerable<animais_porte>
    notIn?: Enumerable<animais_porte>
    not?: NestedEnumanimais_porteWithAggregatesFilter | animais_porte
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_porteFilter
    _max?: NestedEnumanimais_porteFilter
  }

  export type Enumanimais_idadeWithAggregatesFilter = {
    equals?: animais_idade
    in?: Enumerable<animais_idade>
    notIn?: Enumerable<animais_idade>
    not?: NestedEnumanimais_idadeWithAggregatesFilter | animais_idade
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_idadeFilter
    _max?: NestedEnumanimais_idadeFilter
  }

  export type Enumanimais_pelagemWithAggregatesFilter = {
    equals?: animais_pelagem
    in?: Enumerable<animais_pelagem>
    notIn?: Enumerable<animais_pelagem>
    not?: NestedEnumanimais_pelagemWithAggregatesFilter | animais_pelagem
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_pelagemFilter
    _max?: NestedEnumanimais_pelagemFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BytesWithAggregatesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer> | Buffer
    notIn?: Enumerable<Buffer> | Buffer
    not?: NestedBytesWithAggregatesFilter | Buffer
    _count?: NestedIntFilter
    _min?: NestedBytesFilter
    _max?: NestedBytesFilter
  }

  export type BytesNullableFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableFilter | Buffer | null
  }

  export type conta_banco_ongCountOrderByAggregateInput = {
    cnpj?: SortOrder
    numConta?: SortOrder
    agencia?: SortOrder
    operacao?: SortOrder
    pix?: SortOrder
    qrcode?: SortOrder
  }

  export type conta_banco_ongMaxOrderByAggregateInput = {
    cnpj?: SortOrder
    numConta?: SortOrder
    agencia?: SortOrder
    operacao?: SortOrder
    pix?: SortOrder
    qrcode?: SortOrder
  }

  export type conta_banco_ongMinOrderByAggregateInput = {
    cnpj?: SortOrder
    numConta?: SortOrder
    agencia?: SortOrder
    operacao?: SortOrder
    pix?: SortOrder
    qrcode?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableWithAggregatesFilter | Buffer | null
    _count?: NestedIntNullableFilter
    _min?: NestedBytesNullableFilter
    _max?: NestedBytesNullableFilter
  }

  export type endereco_ongCountOrderByAggregateInput = {
    cnpj_end?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
  }

  export type endereco_ongMaxOrderByAggregateInput = {
    cnpj_end?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
  }

  export type endereco_ongMinOrderByAggregateInput = {
    cnpj_end?: SortOrder
    cep?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
  }

  export type endereco_pessoasCountOrderByAggregateInput = {
    cpf_end?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    tipoMoradia?: SortOrder
  }

  export type endereco_pessoasMaxOrderByAggregateInput = {
    cpf_end?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    tipoMoradia?: SortOrder
  }

  export type endereco_pessoasMinOrderByAggregateInput = {
    cpf_end?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    tipoMoradia?: SortOrder
  }

  export type AnimaisListRelationFilter = {
    every?: animaisWhereInput
    some?: animaisWhereInput
    none?: animaisWhereInput
  }

  export type Conta_banco_ongRelationFilter = {
    is?: conta_banco_ongWhereInput | null
    isNot?: conta_banco_ongWhereInput | null
  }

  export type Endereco_ongRelationFilter = {
    is?: endereco_ongWhereInput | null
    isNot?: endereco_ongWhereInput | null
  }

  export type animaisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ongCountOrderByAggregateInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    facebook?: SortOrder
    whatsapp?: SortOrder
    descricao_ong?: SortOrder
    foto?: SortOrder
  }

  export type ongMaxOrderByAggregateInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    facebook?: SortOrder
    whatsapp?: SortOrder
    descricao_ong?: SortOrder
    foto?: SortOrder
  }

  export type ongMinOrderByAggregateInput = {
    cnpj?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    facebook?: SortOrder
    whatsapp?: SortOrder
    descricao_ong?: SortOrder
    foto?: SortOrder
  }

  export type AdotanteRelationFilter = {
    is?: adotanteWhereInput | null
    isNot?: adotanteWhereInput | null
  }

  export type Endereco_pessoasRelationFilter = {
    is?: endereco_pessoasWhereInput | null
    isNot?: endereco_pessoasWhereInput | null
  }

  export type VoluntariosRelationFilter = {
    is?: voluntariosWhereInput | null
    isNot?: voluntariosWhereInput | null
  }

  export type pessoasCountOrderByAggregateInput = {
    cpf?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
  }

  export type pessoasMaxOrderByAggregateInput = {
    cpf?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
  }

  export type pessoasMinOrderByAggregateInput = {
    cpf?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
  }

  export type Enumvoluntarios_disponibilidadeFilter = {
    equals?: voluntarios_disponibilidade
    in?: Enumerable<voluntarios_disponibilidade>
    notIn?: Enumerable<voluntarios_disponibilidade>
    not?: NestedEnumvoluntarios_disponibilidadeFilter | voluntarios_disponibilidade
  }

  export type Enumvoluntarios_transporteFilter = {
    equals?: voluntarios_transporte
    in?: Enumerable<voluntarios_transporte>
    notIn?: Enumerable<voluntarios_transporte>
    not?: NestedEnumvoluntarios_transporteFilter | voluntarios_transporte
  }

  export type Enumvoluntarios_funcaoFilter = {
    equals?: voluntarios_funcao
    in?: Enumerable<voluntarios_funcao>
    notIn?: Enumerable<voluntarios_funcao>
    not?: NestedEnumvoluntarios_funcaoFilter | voluntarios_funcao
  }

  export type voluntariosCountOrderByAggregateInput = {
    cpf_vol?: SortOrder
    disponibilidade?: SortOrder
    transporte?: SortOrder
    funcao?: SortOrder
  }

  export type voluntariosMaxOrderByAggregateInput = {
    cpf_vol?: SortOrder
    disponibilidade?: SortOrder
    transporte?: SortOrder
    funcao?: SortOrder
  }

  export type voluntariosMinOrderByAggregateInput = {
    cpf_vol?: SortOrder
    disponibilidade?: SortOrder
    transporte?: SortOrder
    funcao?: SortOrder
  }

  export type Enumvoluntarios_disponibilidadeWithAggregatesFilter = {
    equals?: voluntarios_disponibilidade
    in?: Enumerable<voluntarios_disponibilidade>
    notIn?: Enumerable<voluntarios_disponibilidade>
    not?: NestedEnumvoluntarios_disponibilidadeWithAggregatesFilter | voluntarios_disponibilidade
    _count?: NestedIntFilter
    _min?: NestedEnumvoluntarios_disponibilidadeFilter
    _max?: NestedEnumvoluntarios_disponibilidadeFilter
  }

  export type Enumvoluntarios_transporteWithAggregatesFilter = {
    equals?: voluntarios_transporte
    in?: Enumerable<voluntarios_transporte>
    notIn?: Enumerable<voluntarios_transporte>
    not?: NestedEnumvoluntarios_transporteWithAggregatesFilter | voluntarios_transporte
    _count?: NestedIntFilter
    _min?: NestedEnumvoluntarios_transporteFilter
    _max?: NestedEnumvoluntarios_transporteFilter
  }

  export type Enumvoluntarios_funcaoWithAggregatesFilter = {
    equals?: voluntarios_funcao
    in?: Enumerable<voluntarios_funcao>
    notIn?: Enumerable<voluntarios_funcao>
    not?: NestedEnumvoluntarios_funcaoWithAggregatesFilter | voluntarios_funcao
    _count?: NestedIntFilter
    _min?: NestedEnumvoluntarios_funcaoFilter
    _max?: NestedEnumvoluntarios_funcaoFilter
  }

  export type pessoasCreateNestedOneWithoutAdotanteInput = {
    create?: XOR<pessoasCreateWithoutAdotanteInput, pessoasUncheckedCreateWithoutAdotanteInput>
    connectOrCreate?: pessoasCreateOrConnectWithoutAdotanteInput
    connect?: pessoasWhereUniqueInput
  }

  export type Enumadotante_rendafixaFieldUpdateOperationsInput = {
    set?: adotante_rendafixa
  }

  export type Enumadotante_aceitacaoAnimalFieldUpdateOperationsInput = {
    set?: adotante_aceitacaoAnimal
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type pessoasUpdateOneRequiredWithoutAdotanteNestedInput = {
    create?: XOR<pessoasCreateWithoutAdotanteInput, pessoasUncheckedCreateWithoutAdotanteInput>
    connectOrCreate?: pessoasCreateOrConnectWithoutAdotanteInput
    upsert?: pessoasUpsertWithoutAdotanteInput
    connect?: pessoasWhereUniqueInput
    update?: XOR<pessoasUpdateWithoutAdotanteInput, pessoasUncheckedUpdateWithoutAdotanteInput>
  }

  export type ongCreateNestedOneWithoutAnimaisInput = {
    create?: XOR<ongCreateWithoutAnimaisInput, ongUncheckedCreateWithoutAnimaisInput>
    connectOrCreate?: ongCreateOrConnectWithoutAnimaisInput
    connect?: ongWhereUniqueInput
  }

  export type Enumanimais_especieFieldUpdateOperationsInput = {
    set?: animais_especie
  }

  export type Enumanimais_sexoFieldUpdateOperationsInput = {
    set?: animais_sexo
  }

  export type Enumanimais_porteFieldUpdateOperationsInput = {
    set?: animais_porte
  }

  export type Enumanimais_idadeFieldUpdateOperationsInput = {
    set?: animais_idade
  }

  export type Enumanimais_pelagemFieldUpdateOperationsInput = {
    set?: animais_pelagem
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type ongUpdateOneRequiredWithoutAnimaisNestedInput = {
    create?: XOR<ongCreateWithoutAnimaisInput, ongUncheckedCreateWithoutAnimaisInput>
    connectOrCreate?: ongCreateOrConnectWithoutAnimaisInput
    upsert?: ongUpsertWithoutAnimaisInput
    connect?: ongWhereUniqueInput
    update?: XOR<ongUpdateWithoutAnimaisInput, ongUncheckedUpdateWithoutAnimaisInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ongCreateNestedOneWithoutConta_banco_ongInput = {
    create?: XOR<ongCreateWithoutConta_banco_ongInput, ongUncheckedCreateWithoutConta_banco_ongInput>
    connectOrCreate?: ongCreateOrConnectWithoutConta_banco_ongInput
    connect?: ongWhereUniqueInput
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type ongUpdateOneRequiredWithoutConta_banco_ongNestedInput = {
    create?: XOR<ongCreateWithoutConta_banco_ongInput, ongUncheckedCreateWithoutConta_banco_ongInput>
    connectOrCreate?: ongCreateOrConnectWithoutConta_banco_ongInput
    upsert?: ongUpsertWithoutConta_banco_ongInput
    connect?: ongWhereUniqueInput
    update?: XOR<ongUpdateWithoutConta_banco_ongInput, ongUncheckedUpdateWithoutConta_banco_ongInput>
  }

  export type ongCreateNestedOneWithoutEndereco_ongInput = {
    create?: XOR<ongCreateWithoutEndereco_ongInput, ongUncheckedCreateWithoutEndereco_ongInput>
    connectOrCreate?: ongCreateOrConnectWithoutEndereco_ongInput
    connect?: ongWhereUniqueInput
  }

  export type ongUpdateOneRequiredWithoutEndereco_ongNestedInput = {
    create?: XOR<ongCreateWithoutEndereco_ongInput, ongUncheckedCreateWithoutEndereco_ongInput>
    connectOrCreate?: ongCreateOrConnectWithoutEndereco_ongInput
    upsert?: ongUpsertWithoutEndereco_ongInput
    connect?: ongWhereUniqueInput
    update?: XOR<ongUpdateWithoutEndereco_ongInput, ongUncheckedUpdateWithoutEndereco_ongInput>
  }

  export type pessoasCreateNestedOneWithoutEndereco_pessoasInput = {
    create?: XOR<pessoasCreateWithoutEndereco_pessoasInput, pessoasUncheckedCreateWithoutEndereco_pessoasInput>
    connectOrCreate?: pessoasCreateOrConnectWithoutEndereco_pessoasInput
    connect?: pessoasWhereUniqueInput
  }

  export type pessoasUpdateOneRequiredWithoutEndereco_pessoasNestedInput = {
    create?: XOR<pessoasCreateWithoutEndereco_pessoasInput, pessoasUncheckedCreateWithoutEndereco_pessoasInput>
    connectOrCreate?: pessoasCreateOrConnectWithoutEndereco_pessoasInput
    upsert?: pessoasUpsertWithoutEndereco_pessoasInput
    connect?: pessoasWhereUniqueInput
    update?: XOR<pessoasUpdateWithoutEndereco_pessoasInput, pessoasUncheckedUpdateWithoutEndereco_pessoasInput>
  }

  export type animaisCreateNestedManyWithoutOngInput = {
    create?: XOR<Enumerable<animaisCreateWithoutOngInput>, Enumerable<animaisUncheckedCreateWithoutOngInput>>
    connectOrCreate?: Enumerable<animaisCreateOrConnectWithoutOngInput>
    createMany?: animaisCreateManyOngInputEnvelope
    connect?: Enumerable<animaisWhereUniqueInput>
  }

  export type conta_banco_ongCreateNestedOneWithoutOngInput = {
    create?: XOR<conta_banco_ongCreateWithoutOngInput, conta_banco_ongUncheckedCreateWithoutOngInput>
    connectOrCreate?: conta_banco_ongCreateOrConnectWithoutOngInput
    connect?: conta_banco_ongWhereUniqueInput
  }

  export type endereco_ongCreateNestedOneWithoutOngInput = {
    create?: XOR<endereco_ongCreateWithoutOngInput, endereco_ongUncheckedCreateWithoutOngInput>
    connectOrCreate?: endereco_ongCreateOrConnectWithoutOngInput
    connect?: endereco_ongWhereUniqueInput
  }

  export type animaisUncheckedCreateNestedManyWithoutOngInput = {
    create?: XOR<Enumerable<animaisCreateWithoutOngInput>, Enumerable<animaisUncheckedCreateWithoutOngInput>>
    connectOrCreate?: Enumerable<animaisCreateOrConnectWithoutOngInput>
    createMany?: animaisCreateManyOngInputEnvelope
    connect?: Enumerable<animaisWhereUniqueInput>
  }

  export type conta_banco_ongUncheckedCreateNestedOneWithoutOngInput = {
    create?: XOR<conta_banco_ongCreateWithoutOngInput, conta_banco_ongUncheckedCreateWithoutOngInput>
    connectOrCreate?: conta_banco_ongCreateOrConnectWithoutOngInput
    connect?: conta_banco_ongWhereUniqueInput
  }

  export type endereco_ongUncheckedCreateNestedOneWithoutOngInput = {
    create?: XOR<endereco_ongCreateWithoutOngInput, endereco_ongUncheckedCreateWithoutOngInput>
    connectOrCreate?: endereco_ongCreateOrConnectWithoutOngInput
    connect?: endereco_ongWhereUniqueInput
  }

  export type animaisUpdateManyWithoutOngNestedInput = {
    create?: XOR<Enumerable<animaisCreateWithoutOngInput>, Enumerable<animaisUncheckedCreateWithoutOngInput>>
    connectOrCreate?: Enumerable<animaisCreateOrConnectWithoutOngInput>
    upsert?: Enumerable<animaisUpsertWithWhereUniqueWithoutOngInput>
    createMany?: animaisCreateManyOngInputEnvelope
    set?: Enumerable<animaisWhereUniqueInput>
    disconnect?: Enumerable<animaisWhereUniqueInput>
    delete?: Enumerable<animaisWhereUniqueInput>
    connect?: Enumerable<animaisWhereUniqueInput>
    update?: Enumerable<animaisUpdateWithWhereUniqueWithoutOngInput>
    updateMany?: Enumerable<animaisUpdateManyWithWhereWithoutOngInput>
    deleteMany?: Enumerable<animaisScalarWhereInput>
  }

  export type conta_banco_ongUpdateOneWithoutOngNestedInput = {
    create?: XOR<conta_banco_ongCreateWithoutOngInput, conta_banco_ongUncheckedCreateWithoutOngInput>
    connectOrCreate?: conta_banco_ongCreateOrConnectWithoutOngInput
    upsert?: conta_banco_ongUpsertWithoutOngInput
    disconnect?: boolean
    delete?: boolean
    connect?: conta_banco_ongWhereUniqueInput
    update?: XOR<conta_banco_ongUpdateWithoutOngInput, conta_banco_ongUncheckedUpdateWithoutOngInput>
  }

  export type endereco_ongUpdateOneWithoutOngNestedInput = {
    create?: XOR<endereco_ongCreateWithoutOngInput, endereco_ongUncheckedCreateWithoutOngInput>
    connectOrCreate?: endereco_ongCreateOrConnectWithoutOngInput
    upsert?: endereco_ongUpsertWithoutOngInput
    disconnect?: boolean
    delete?: boolean
    connect?: endereco_ongWhereUniqueInput
    update?: XOR<endereco_ongUpdateWithoutOngInput, endereco_ongUncheckedUpdateWithoutOngInput>
  }

  export type animaisUncheckedUpdateManyWithoutOngNestedInput = {
    create?: XOR<Enumerable<animaisCreateWithoutOngInput>, Enumerable<animaisUncheckedCreateWithoutOngInput>>
    connectOrCreate?: Enumerable<animaisCreateOrConnectWithoutOngInput>
    upsert?: Enumerable<animaisUpsertWithWhereUniqueWithoutOngInput>
    createMany?: animaisCreateManyOngInputEnvelope
    set?: Enumerable<animaisWhereUniqueInput>
    disconnect?: Enumerable<animaisWhereUniqueInput>
    delete?: Enumerable<animaisWhereUniqueInput>
    connect?: Enumerable<animaisWhereUniqueInput>
    update?: Enumerable<animaisUpdateWithWhereUniqueWithoutOngInput>
    updateMany?: Enumerable<animaisUpdateManyWithWhereWithoutOngInput>
    deleteMany?: Enumerable<animaisScalarWhereInput>
  }

  export type conta_banco_ongUncheckedUpdateOneWithoutOngNestedInput = {
    create?: XOR<conta_banco_ongCreateWithoutOngInput, conta_banco_ongUncheckedCreateWithoutOngInput>
    connectOrCreate?: conta_banco_ongCreateOrConnectWithoutOngInput
    upsert?: conta_banco_ongUpsertWithoutOngInput
    disconnect?: boolean
    delete?: boolean
    connect?: conta_banco_ongWhereUniqueInput
    update?: XOR<conta_banco_ongUpdateWithoutOngInput, conta_banco_ongUncheckedUpdateWithoutOngInput>
  }

  export type endereco_ongUncheckedUpdateOneWithoutOngNestedInput = {
    create?: XOR<endereco_ongCreateWithoutOngInput, endereco_ongUncheckedCreateWithoutOngInput>
    connectOrCreate?: endereco_ongCreateOrConnectWithoutOngInput
    upsert?: endereco_ongUpsertWithoutOngInput
    disconnect?: boolean
    delete?: boolean
    connect?: endereco_ongWhereUniqueInput
    update?: XOR<endereco_ongUpdateWithoutOngInput, endereco_ongUncheckedUpdateWithoutOngInput>
  }

  export type adotanteCreateNestedOneWithoutPessoasInput = {
    create?: XOR<adotanteCreateWithoutPessoasInput, adotanteUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: adotanteCreateOrConnectWithoutPessoasInput
    connect?: adotanteWhereUniqueInput
  }

  export type endereco_pessoasCreateNestedOneWithoutPessoasInput = {
    create?: XOR<endereco_pessoasCreateWithoutPessoasInput, endereco_pessoasUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: endereco_pessoasCreateOrConnectWithoutPessoasInput
    connect?: endereco_pessoasWhereUniqueInput
  }

  export type voluntariosCreateNestedOneWithoutPessoasInput = {
    create?: XOR<voluntariosCreateWithoutPessoasInput, voluntariosUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: voluntariosCreateOrConnectWithoutPessoasInput
    connect?: voluntariosWhereUniqueInput
  }

  export type adotanteUncheckedCreateNestedOneWithoutPessoasInput = {
    create?: XOR<adotanteCreateWithoutPessoasInput, adotanteUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: adotanteCreateOrConnectWithoutPessoasInput
    connect?: adotanteWhereUniqueInput
  }

  export type endereco_pessoasUncheckedCreateNestedOneWithoutPessoasInput = {
    create?: XOR<endereco_pessoasCreateWithoutPessoasInput, endereco_pessoasUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: endereco_pessoasCreateOrConnectWithoutPessoasInput
    connect?: endereco_pessoasWhereUniqueInput
  }

  export type voluntariosUncheckedCreateNestedOneWithoutPessoasInput = {
    create?: XOR<voluntariosCreateWithoutPessoasInput, voluntariosUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: voluntariosCreateOrConnectWithoutPessoasInput
    connect?: voluntariosWhereUniqueInput
  }

  export type adotanteUpdateOneWithoutPessoasNestedInput = {
    create?: XOR<adotanteCreateWithoutPessoasInput, adotanteUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: adotanteCreateOrConnectWithoutPessoasInput
    upsert?: adotanteUpsertWithoutPessoasInput
    disconnect?: boolean
    delete?: boolean
    connect?: adotanteWhereUniqueInput
    update?: XOR<adotanteUpdateWithoutPessoasInput, adotanteUncheckedUpdateWithoutPessoasInput>
  }

  export type endereco_pessoasUpdateOneWithoutPessoasNestedInput = {
    create?: XOR<endereco_pessoasCreateWithoutPessoasInput, endereco_pessoasUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: endereco_pessoasCreateOrConnectWithoutPessoasInput
    upsert?: endereco_pessoasUpsertWithoutPessoasInput
    disconnect?: boolean
    delete?: boolean
    connect?: endereco_pessoasWhereUniqueInput
    update?: XOR<endereco_pessoasUpdateWithoutPessoasInput, endereco_pessoasUncheckedUpdateWithoutPessoasInput>
  }

  export type voluntariosUpdateOneWithoutPessoasNestedInput = {
    create?: XOR<voluntariosCreateWithoutPessoasInput, voluntariosUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: voluntariosCreateOrConnectWithoutPessoasInput
    upsert?: voluntariosUpsertWithoutPessoasInput
    disconnect?: boolean
    delete?: boolean
    connect?: voluntariosWhereUniqueInput
    update?: XOR<voluntariosUpdateWithoutPessoasInput, voluntariosUncheckedUpdateWithoutPessoasInput>
  }

  export type adotanteUncheckedUpdateOneWithoutPessoasNestedInput = {
    create?: XOR<adotanteCreateWithoutPessoasInput, adotanteUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: adotanteCreateOrConnectWithoutPessoasInput
    upsert?: adotanteUpsertWithoutPessoasInput
    disconnect?: boolean
    delete?: boolean
    connect?: adotanteWhereUniqueInput
    update?: XOR<adotanteUpdateWithoutPessoasInput, adotanteUncheckedUpdateWithoutPessoasInput>
  }

  export type endereco_pessoasUncheckedUpdateOneWithoutPessoasNestedInput = {
    create?: XOR<endereco_pessoasCreateWithoutPessoasInput, endereco_pessoasUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: endereco_pessoasCreateOrConnectWithoutPessoasInput
    upsert?: endereco_pessoasUpsertWithoutPessoasInput
    disconnect?: boolean
    delete?: boolean
    connect?: endereco_pessoasWhereUniqueInput
    update?: XOR<endereco_pessoasUpdateWithoutPessoasInput, endereco_pessoasUncheckedUpdateWithoutPessoasInput>
  }

  export type voluntariosUncheckedUpdateOneWithoutPessoasNestedInput = {
    create?: XOR<voluntariosCreateWithoutPessoasInput, voluntariosUncheckedCreateWithoutPessoasInput>
    connectOrCreate?: voluntariosCreateOrConnectWithoutPessoasInput
    upsert?: voluntariosUpsertWithoutPessoasInput
    disconnect?: boolean
    delete?: boolean
    connect?: voluntariosWhereUniqueInput
    update?: XOR<voluntariosUpdateWithoutPessoasInput, voluntariosUncheckedUpdateWithoutPessoasInput>
  }

  export type pessoasCreateNestedOneWithoutVoluntariosInput = {
    create?: XOR<pessoasCreateWithoutVoluntariosInput, pessoasUncheckedCreateWithoutVoluntariosInput>
    connectOrCreate?: pessoasCreateOrConnectWithoutVoluntariosInput
    connect?: pessoasWhereUniqueInput
  }

  export type Enumvoluntarios_disponibilidadeFieldUpdateOperationsInput = {
    set?: voluntarios_disponibilidade
  }

  export type Enumvoluntarios_transporteFieldUpdateOperationsInput = {
    set?: voluntarios_transporte
  }

  export type Enumvoluntarios_funcaoFieldUpdateOperationsInput = {
    set?: voluntarios_funcao
  }

  export type pessoasUpdateOneRequiredWithoutVoluntariosNestedInput = {
    create?: XOR<pessoasCreateWithoutVoluntariosInput, pessoasUncheckedCreateWithoutVoluntariosInput>
    connectOrCreate?: pessoasCreateOrConnectWithoutVoluntariosInput
    upsert?: pessoasUpsertWithoutVoluntariosInput
    connect?: pessoasWhereUniqueInput
    update?: XOR<pessoasUpdateWithoutVoluntariosInput, pessoasUncheckedUpdateWithoutVoluntariosInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumadotante_rendafixaFilter = {
    equals?: adotante_rendafixa
    in?: Enumerable<adotante_rendafixa>
    notIn?: Enumerable<adotante_rendafixa>
    not?: NestedEnumadotante_rendafixaFilter | adotante_rendafixa
  }

  export type NestedEnumadotante_aceitacaoAnimalFilter = {
    equals?: adotante_aceitacaoAnimal
    in?: Enumerable<adotante_aceitacaoAnimal>
    notIn?: Enumerable<adotante_aceitacaoAnimal>
    not?: NestedEnumadotante_aceitacaoAnimalFilter | adotante_aceitacaoAnimal
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumadotante_rendafixaWithAggregatesFilter = {
    equals?: adotante_rendafixa
    in?: Enumerable<adotante_rendafixa>
    notIn?: Enumerable<adotante_rendafixa>
    not?: NestedEnumadotante_rendafixaWithAggregatesFilter | adotante_rendafixa
    _count?: NestedIntFilter
    _min?: NestedEnumadotante_rendafixaFilter
    _max?: NestedEnumadotante_rendafixaFilter
  }

  export type NestedEnumadotante_aceitacaoAnimalWithAggregatesFilter = {
    equals?: adotante_aceitacaoAnimal
    in?: Enumerable<adotante_aceitacaoAnimal>
    notIn?: Enumerable<adotante_aceitacaoAnimal>
    not?: NestedEnumadotante_aceitacaoAnimalWithAggregatesFilter | adotante_aceitacaoAnimal
    _count?: NestedIntFilter
    _min?: NestedEnumadotante_aceitacaoAnimalFilter
    _max?: NestedEnumadotante_aceitacaoAnimalFilter
  }

  export type NestedEnumanimais_especieFilter = {
    equals?: animais_especie
    in?: Enumerable<animais_especie>
    notIn?: Enumerable<animais_especie>
    not?: NestedEnumanimais_especieFilter | animais_especie
  }

  export type NestedEnumanimais_sexoFilter = {
    equals?: animais_sexo
    in?: Enumerable<animais_sexo>
    notIn?: Enumerable<animais_sexo>
    not?: NestedEnumanimais_sexoFilter | animais_sexo
  }

  export type NestedEnumanimais_porteFilter = {
    equals?: animais_porte
    in?: Enumerable<animais_porte>
    notIn?: Enumerable<animais_porte>
    not?: NestedEnumanimais_porteFilter | animais_porte
  }

  export type NestedEnumanimais_idadeFilter = {
    equals?: animais_idade
    in?: Enumerable<animais_idade>
    notIn?: Enumerable<animais_idade>
    not?: NestedEnumanimais_idadeFilter | animais_idade
  }

  export type NestedEnumanimais_pelagemFilter = {
    equals?: animais_pelagem
    in?: Enumerable<animais_pelagem>
    notIn?: Enumerable<animais_pelagem>
    not?: NestedEnumanimais_pelagemFilter | animais_pelagem
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBytesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer> | Buffer
    notIn?: Enumerable<Buffer> | Buffer
    not?: NestedBytesFilter | Buffer
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumanimais_especieWithAggregatesFilter = {
    equals?: animais_especie
    in?: Enumerable<animais_especie>
    notIn?: Enumerable<animais_especie>
    not?: NestedEnumanimais_especieWithAggregatesFilter | animais_especie
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_especieFilter
    _max?: NestedEnumanimais_especieFilter
  }

  export type NestedEnumanimais_sexoWithAggregatesFilter = {
    equals?: animais_sexo
    in?: Enumerable<animais_sexo>
    notIn?: Enumerable<animais_sexo>
    not?: NestedEnumanimais_sexoWithAggregatesFilter | animais_sexo
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_sexoFilter
    _max?: NestedEnumanimais_sexoFilter
  }

  export type NestedEnumanimais_porteWithAggregatesFilter = {
    equals?: animais_porte
    in?: Enumerable<animais_porte>
    notIn?: Enumerable<animais_porte>
    not?: NestedEnumanimais_porteWithAggregatesFilter | animais_porte
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_porteFilter
    _max?: NestedEnumanimais_porteFilter
  }

  export type NestedEnumanimais_idadeWithAggregatesFilter = {
    equals?: animais_idade
    in?: Enumerable<animais_idade>
    notIn?: Enumerable<animais_idade>
    not?: NestedEnumanimais_idadeWithAggregatesFilter | animais_idade
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_idadeFilter
    _max?: NestedEnumanimais_idadeFilter
  }

  export type NestedEnumanimais_pelagemWithAggregatesFilter = {
    equals?: animais_pelagem
    in?: Enumerable<animais_pelagem>
    notIn?: Enumerable<animais_pelagem>
    not?: NestedEnumanimais_pelagemWithAggregatesFilter | animais_pelagem
    _count?: NestedIntFilter
    _min?: NestedEnumanimais_pelagemFilter
    _max?: NestedEnumanimais_pelagemFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBytesWithAggregatesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer> | Buffer
    notIn?: Enumerable<Buffer> | Buffer
    not?: NestedBytesWithAggregatesFilter | Buffer
    _count?: NestedIntFilter
    _min?: NestedBytesFilter
    _max?: NestedBytesFilter
  }

  export type NestedBytesNullableFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableFilter | Buffer | null
  }

  export type NestedBytesNullableWithAggregatesFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableWithAggregatesFilter | Buffer | null
    _count?: NestedIntNullableFilter
    _min?: NestedBytesNullableFilter
    _max?: NestedBytesNullableFilter
  }

  export type NestedEnumvoluntarios_disponibilidadeFilter = {
    equals?: voluntarios_disponibilidade
    in?: Enumerable<voluntarios_disponibilidade>
    notIn?: Enumerable<voluntarios_disponibilidade>
    not?: NestedEnumvoluntarios_disponibilidadeFilter | voluntarios_disponibilidade
  }

  export type NestedEnumvoluntarios_transporteFilter = {
    equals?: voluntarios_transporte
    in?: Enumerable<voluntarios_transporte>
    notIn?: Enumerable<voluntarios_transporte>
    not?: NestedEnumvoluntarios_transporteFilter | voluntarios_transporte
  }

  export type NestedEnumvoluntarios_funcaoFilter = {
    equals?: voluntarios_funcao
    in?: Enumerable<voluntarios_funcao>
    notIn?: Enumerable<voluntarios_funcao>
    not?: NestedEnumvoluntarios_funcaoFilter | voluntarios_funcao
  }

  export type NestedEnumvoluntarios_disponibilidadeWithAggregatesFilter = {
    equals?: voluntarios_disponibilidade
    in?: Enumerable<voluntarios_disponibilidade>
    notIn?: Enumerable<voluntarios_disponibilidade>
    not?: NestedEnumvoluntarios_disponibilidadeWithAggregatesFilter | voluntarios_disponibilidade
    _count?: NestedIntFilter
    _min?: NestedEnumvoluntarios_disponibilidadeFilter
    _max?: NestedEnumvoluntarios_disponibilidadeFilter
  }

  export type NestedEnumvoluntarios_transporteWithAggregatesFilter = {
    equals?: voluntarios_transporte
    in?: Enumerable<voluntarios_transporte>
    notIn?: Enumerable<voluntarios_transporte>
    not?: NestedEnumvoluntarios_transporteWithAggregatesFilter | voluntarios_transporte
    _count?: NestedIntFilter
    _min?: NestedEnumvoluntarios_transporteFilter
    _max?: NestedEnumvoluntarios_transporteFilter
  }

  export type NestedEnumvoluntarios_funcaoWithAggregatesFilter = {
    equals?: voluntarios_funcao
    in?: Enumerable<voluntarios_funcao>
    notIn?: Enumerable<voluntarios_funcao>
    not?: NestedEnumvoluntarios_funcaoWithAggregatesFilter | voluntarios_funcao
    _count?: NestedIntFilter
    _min?: NestedEnumvoluntarios_funcaoFilter
    _max?: NestedEnumvoluntarios_funcaoFilter
  }

  export type pessoasCreateWithoutAdotanteInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
    endereco_pessoas?: endereco_pessoasCreateNestedOneWithoutPessoasInput
    voluntarios?: voluntariosCreateNestedOneWithoutPessoasInput
  }

  export type pessoasUncheckedCreateWithoutAdotanteInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
    endereco_pessoas?: endereco_pessoasUncheckedCreateNestedOneWithoutPessoasInput
    voluntarios?: voluntariosUncheckedCreateNestedOneWithoutPessoasInput
  }

  export type pessoasCreateOrConnectWithoutAdotanteInput = {
    where: pessoasWhereUniqueInput
    create: XOR<pessoasCreateWithoutAdotanteInput, pessoasUncheckedCreateWithoutAdotanteInput>
  }

  export type pessoasUpsertWithoutAdotanteInput = {
    update: XOR<pessoasUpdateWithoutAdotanteInput, pessoasUncheckedUpdateWithoutAdotanteInput>
    create: XOR<pessoasCreateWithoutAdotanteInput, pessoasUncheckedCreateWithoutAdotanteInput>
  }

  export type pessoasUpdateWithoutAdotanteInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco_pessoas?: endereco_pessoasUpdateOneWithoutPessoasNestedInput
    voluntarios?: voluntariosUpdateOneWithoutPessoasNestedInput
  }

  export type pessoasUncheckedUpdateWithoutAdotanteInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    endereco_pessoas?: endereco_pessoasUncheckedUpdateOneWithoutPessoasNestedInput
    voluntarios?: voluntariosUncheckedUpdateOneWithoutPessoasNestedInput
  }

  export type ongCreateWithoutAnimaisInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
    conta_banco_ong?: conta_banco_ongCreateNestedOneWithoutOngInput
    endereco_ong?: endereco_ongCreateNestedOneWithoutOngInput
  }

  export type ongUncheckedCreateWithoutAnimaisInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
    conta_banco_ong?: conta_banco_ongUncheckedCreateNestedOneWithoutOngInput
    endereco_ong?: endereco_ongUncheckedCreateNestedOneWithoutOngInput
  }

  export type ongCreateOrConnectWithoutAnimaisInput = {
    where: ongWhereUniqueInput
    create: XOR<ongCreateWithoutAnimaisInput, ongUncheckedCreateWithoutAnimaisInput>
  }

  export type ongUpsertWithoutAnimaisInput = {
    update: XOR<ongUpdateWithoutAnimaisInput, ongUncheckedUpdateWithoutAnimaisInput>
    create: XOR<ongCreateWithoutAnimaisInput, ongUncheckedCreateWithoutAnimaisInput>
  }

  export type ongUpdateWithoutAnimaisInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
    conta_banco_ong?: conta_banco_ongUpdateOneWithoutOngNestedInput
    endereco_ong?: endereco_ongUpdateOneWithoutOngNestedInput
  }

  export type ongUncheckedUpdateWithoutAnimaisInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
    conta_banco_ong?: conta_banco_ongUncheckedUpdateOneWithoutOngNestedInput
    endereco_ong?: endereco_ongUncheckedUpdateOneWithoutOngNestedInput
  }

  export type ongCreateWithoutConta_banco_ongInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
    animais?: animaisCreateNestedManyWithoutOngInput
    endereco_ong?: endereco_ongCreateNestedOneWithoutOngInput
  }

  export type ongUncheckedCreateWithoutConta_banco_ongInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
    animais?: animaisUncheckedCreateNestedManyWithoutOngInput
    endereco_ong?: endereco_ongUncheckedCreateNestedOneWithoutOngInput
  }

  export type ongCreateOrConnectWithoutConta_banco_ongInput = {
    where: ongWhereUniqueInput
    create: XOR<ongCreateWithoutConta_banco_ongInput, ongUncheckedCreateWithoutConta_banco_ongInput>
  }

  export type ongUpsertWithoutConta_banco_ongInput = {
    update: XOR<ongUpdateWithoutConta_banco_ongInput, ongUncheckedUpdateWithoutConta_banco_ongInput>
    create: XOR<ongCreateWithoutConta_banco_ongInput, ongUncheckedCreateWithoutConta_banco_ongInput>
  }

  export type ongUpdateWithoutConta_banco_ongInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
    animais?: animaisUpdateManyWithoutOngNestedInput
    endereco_ong?: endereco_ongUpdateOneWithoutOngNestedInput
  }

  export type ongUncheckedUpdateWithoutConta_banco_ongInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
    animais?: animaisUncheckedUpdateManyWithoutOngNestedInput
    endereco_ong?: endereco_ongUncheckedUpdateOneWithoutOngNestedInput
  }

  export type ongCreateWithoutEndereco_ongInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
    animais?: animaisCreateNestedManyWithoutOngInput
    conta_banco_ong?: conta_banco_ongCreateNestedOneWithoutOngInput
  }

  export type ongUncheckedCreateWithoutEndereco_ongInput = {
    cnpj: string
    nome: string
    email: string
    senha: string
    facebook?: string | null
    whatsapp?: string | null
    descricao_ong: string
    foto: Buffer
    animais?: animaisUncheckedCreateNestedManyWithoutOngInput
    conta_banco_ong?: conta_banco_ongUncheckedCreateNestedOneWithoutOngInput
  }

  export type ongCreateOrConnectWithoutEndereco_ongInput = {
    where: ongWhereUniqueInput
    create: XOR<ongCreateWithoutEndereco_ongInput, ongUncheckedCreateWithoutEndereco_ongInput>
  }

  export type ongUpsertWithoutEndereco_ongInput = {
    update: XOR<ongUpdateWithoutEndereco_ongInput, ongUncheckedUpdateWithoutEndereco_ongInput>
    create: XOR<ongCreateWithoutEndereco_ongInput, ongUncheckedCreateWithoutEndereco_ongInput>
  }

  export type ongUpdateWithoutEndereco_ongInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
    animais?: animaisUpdateManyWithoutOngNestedInput
    conta_banco_ong?: conta_banco_ongUpdateOneWithoutOngNestedInput
  }

  export type ongUncheckedUpdateWithoutEndereco_ongInput = {
    cnpj?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    descricao_ong?: StringFieldUpdateOperationsInput | string
    foto?: BytesFieldUpdateOperationsInput | Buffer
    animais?: animaisUncheckedUpdateManyWithoutOngNestedInput
    conta_banco_ong?: conta_banco_ongUncheckedUpdateOneWithoutOngNestedInput
  }

  export type pessoasCreateWithoutEndereco_pessoasInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
    adotante?: adotanteCreateNestedOneWithoutPessoasInput
    voluntarios?: voluntariosCreateNestedOneWithoutPessoasInput
  }

  export type pessoasUncheckedCreateWithoutEndereco_pessoasInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
    adotante?: adotanteUncheckedCreateNestedOneWithoutPessoasInput
    voluntarios?: voluntariosUncheckedCreateNestedOneWithoutPessoasInput
  }

  export type pessoasCreateOrConnectWithoutEndereco_pessoasInput = {
    where: pessoasWhereUniqueInput
    create: XOR<pessoasCreateWithoutEndereco_pessoasInput, pessoasUncheckedCreateWithoutEndereco_pessoasInput>
  }

  export type pessoasUpsertWithoutEndereco_pessoasInput = {
    update: XOR<pessoasUpdateWithoutEndereco_pessoasInput, pessoasUncheckedUpdateWithoutEndereco_pessoasInput>
    create: XOR<pessoasCreateWithoutEndereco_pessoasInput, pessoasUncheckedCreateWithoutEndereco_pessoasInput>
  }

  export type pessoasUpdateWithoutEndereco_pessoasInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    adotante?: adotanteUpdateOneWithoutPessoasNestedInput
    voluntarios?: voluntariosUpdateOneWithoutPessoasNestedInput
  }

  export type pessoasUncheckedUpdateWithoutEndereco_pessoasInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    adotante?: adotanteUncheckedUpdateOneWithoutPessoasNestedInput
    voluntarios?: voluntariosUncheckedUpdateOneWithoutPessoasNestedInput
  }

  export type animaisCreateWithoutOngInput = {
    especie: animais_especie
    sexo: animais_sexo
    porte: animais_porte
    idade: animais_idade
    pelagem: animais_pelagem
    cor: string
    deficiencia?: string | null
    vacinas: string
    descricao?: string | null
    foto: Buffer
  }

  export type animaisUncheckedCreateWithoutOngInput = {
    id_animal?: number
    especie: animais_especie
    sexo: animais_sexo
    porte: animais_porte
    idade: animais_idade
    pelagem: animais_pelagem
    cor: string
    deficiencia?: string | null
    vacinas: string
    descricao?: string | null
    foto: Buffer
  }

  export type animaisCreateOrConnectWithoutOngInput = {
    where: animaisWhereUniqueInput
    create: XOR<animaisCreateWithoutOngInput, animaisUncheckedCreateWithoutOngInput>
  }

  export type animaisCreateManyOngInputEnvelope = {
    data: Enumerable<animaisCreateManyOngInput>
    skipDuplicates?: boolean
  }

  export type conta_banco_ongCreateWithoutOngInput = {
    numConta: string
    agencia: string
    operacao?: string | null
    pix: string
    qrcode?: Buffer | null
  }

  export type conta_banco_ongUncheckedCreateWithoutOngInput = {
    numConta: string
    agencia: string
    operacao?: string | null
    pix: string
    qrcode?: Buffer | null
  }

  export type conta_banco_ongCreateOrConnectWithoutOngInput = {
    where: conta_banco_ongWhereUniqueInput
    create: XOR<conta_banco_ongCreateWithoutOngInput, conta_banco_ongUncheckedCreateWithoutOngInput>
  }

  export type endereco_ongCreateWithoutOngInput = {
    cep: string
    cidade: string
    bairro: string
    rua: string
    numero: string
  }

  export type endereco_ongUncheckedCreateWithoutOngInput = {
    cep: string
    cidade: string
    bairro: string
    rua: string
    numero: string
  }

  export type endereco_ongCreateOrConnectWithoutOngInput = {
    where: endereco_ongWhereUniqueInput
    create: XOR<endereco_ongCreateWithoutOngInput, endereco_ongUncheckedCreateWithoutOngInput>
  }

  export type animaisUpsertWithWhereUniqueWithoutOngInput = {
    where: animaisWhereUniqueInput
    update: XOR<animaisUpdateWithoutOngInput, animaisUncheckedUpdateWithoutOngInput>
    create: XOR<animaisCreateWithoutOngInput, animaisUncheckedCreateWithoutOngInput>
  }

  export type animaisUpdateWithWhereUniqueWithoutOngInput = {
    where: animaisWhereUniqueInput
    data: XOR<animaisUpdateWithoutOngInput, animaisUncheckedUpdateWithoutOngInput>
  }

  export type animaisUpdateManyWithWhereWithoutOngInput = {
    where: animaisScalarWhereInput
    data: XOR<animaisUpdateManyMutationInput, animaisUncheckedUpdateManyWithoutAnimaisInput>
  }

  export type animaisScalarWhereInput = {
    AND?: Enumerable<animaisScalarWhereInput>
    OR?: Enumerable<animaisScalarWhereInput>
    NOT?: Enumerable<animaisScalarWhereInput>
    id_animal?: IntFilter | number
    cnpj_pet?: StringFilter | string
    especie?: Enumanimais_especieFilter | animais_especie
    sexo?: Enumanimais_sexoFilter | animais_sexo
    porte?: Enumanimais_porteFilter | animais_porte
    idade?: Enumanimais_idadeFilter | animais_idade
    pelagem?: Enumanimais_pelagemFilter | animais_pelagem
    cor?: StringFilter | string
    deficiencia?: StringNullableFilter | string | null
    vacinas?: StringFilter | string
    descricao?: StringNullableFilter | string | null
    foto?: BytesFilter | Buffer
  }

  export type conta_banco_ongUpsertWithoutOngInput = {
    update: XOR<conta_banco_ongUpdateWithoutOngInput, conta_banco_ongUncheckedUpdateWithoutOngInput>
    create: XOR<conta_banco_ongCreateWithoutOngInput, conta_banco_ongUncheckedCreateWithoutOngInput>
  }

  export type conta_banco_ongUpdateWithoutOngInput = {
    numConta?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    operacao?: NullableStringFieldUpdateOperationsInput | string | null
    pix?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type conta_banco_ongUncheckedUpdateWithoutOngInput = {
    numConta?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    operacao?: NullableStringFieldUpdateOperationsInput | string | null
    pix?: StringFieldUpdateOperationsInput | string
    qrcode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type endereco_ongUpsertWithoutOngInput = {
    update: XOR<endereco_ongUpdateWithoutOngInput, endereco_ongUncheckedUpdateWithoutOngInput>
    create: XOR<endereco_ongCreateWithoutOngInput, endereco_ongUncheckedCreateWithoutOngInput>
  }

  export type endereco_ongUpdateWithoutOngInput = {
    cep?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type endereco_ongUncheckedUpdateWithoutOngInput = {
    cep?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type adotanteCreateWithoutPessoasInput = {
    rendafixa: adotante_rendafixa
    aceitacaoAnimal: adotante_aceitacaoAnimal
    animaisAtuais: string
    animaisAntigos: string
    descMoradores: string
    motivacao: string
  }

  export type adotanteUncheckedCreateWithoutPessoasInput = {
    rendafixa: adotante_rendafixa
    aceitacaoAnimal: adotante_aceitacaoAnimal
    animaisAtuais: string
    animaisAntigos: string
    descMoradores: string
    motivacao: string
  }

  export type adotanteCreateOrConnectWithoutPessoasInput = {
    where: adotanteWhereUniqueInput
    create: XOR<adotanteCreateWithoutPessoasInput, adotanteUncheckedCreateWithoutPessoasInput>
  }

  export type endereco_pessoasCreateWithoutPessoasInput = {
    cidade: string
    bairro: string
    rua: string
    numero: string
    tipoMoradia: string
  }

  export type endereco_pessoasUncheckedCreateWithoutPessoasInput = {
    cidade: string
    bairro: string
    rua: string
    numero: string
    tipoMoradia: string
  }

  export type endereco_pessoasCreateOrConnectWithoutPessoasInput = {
    where: endereco_pessoasWhereUniqueInput
    create: XOR<endereco_pessoasCreateWithoutPessoasInput, endereco_pessoasUncheckedCreateWithoutPessoasInput>
  }

  export type voluntariosCreateWithoutPessoasInput = {
    disponibilidade: voluntarios_disponibilidade
    transporte: voluntarios_transporte
    funcao: voluntarios_funcao
  }

  export type voluntariosUncheckedCreateWithoutPessoasInput = {
    disponibilidade: voluntarios_disponibilidade
    transporte: voluntarios_transporte
    funcao: voluntarios_funcao
  }

  export type voluntariosCreateOrConnectWithoutPessoasInput = {
    where: voluntariosWhereUniqueInput
    create: XOR<voluntariosCreateWithoutPessoasInput, voluntariosUncheckedCreateWithoutPessoasInput>
  }

  export type adotanteUpsertWithoutPessoasInput = {
    update: XOR<adotanteUpdateWithoutPessoasInput, adotanteUncheckedUpdateWithoutPessoasInput>
    create: XOR<adotanteCreateWithoutPessoasInput, adotanteUncheckedCreateWithoutPessoasInput>
  }

  export type adotanteUpdateWithoutPessoasInput = {
    rendafixa?: Enumadotante_rendafixaFieldUpdateOperationsInput | adotante_rendafixa
    aceitacaoAnimal?: Enumadotante_aceitacaoAnimalFieldUpdateOperationsInput | adotante_aceitacaoAnimal
    animaisAtuais?: StringFieldUpdateOperationsInput | string
    animaisAntigos?: StringFieldUpdateOperationsInput | string
    descMoradores?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
  }

  export type adotanteUncheckedUpdateWithoutPessoasInput = {
    rendafixa?: Enumadotante_rendafixaFieldUpdateOperationsInput | adotante_rendafixa
    aceitacaoAnimal?: Enumadotante_aceitacaoAnimalFieldUpdateOperationsInput | adotante_aceitacaoAnimal
    animaisAtuais?: StringFieldUpdateOperationsInput | string
    animaisAntigos?: StringFieldUpdateOperationsInput | string
    descMoradores?: StringFieldUpdateOperationsInput | string
    motivacao?: StringFieldUpdateOperationsInput | string
  }

  export type endereco_pessoasUpsertWithoutPessoasInput = {
    update: XOR<endereco_pessoasUpdateWithoutPessoasInput, endereco_pessoasUncheckedUpdateWithoutPessoasInput>
    create: XOR<endereco_pessoasCreateWithoutPessoasInput, endereco_pessoasUncheckedCreateWithoutPessoasInput>
  }

  export type endereco_pessoasUpdateWithoutPessoasInput = {
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    tipoMoradia?: StringFieldUpdateOperationsInput | string
  }

  export type endereco_pessoasUncheckedUpdateWithoutPessoasInput = {
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    tipoMoradia?: StringFieldUpdateOperationsInput | string
  }

  export type voluntariosUpsertWithoutPessoasInput = {
    update: XOR<voluntariosUpdateWithoutPessoasInput, voluntariosUncheckedUpdateWithoutPessoasInput>
    create: XOR<voluntariosCreateWithoutPessoasInput, voluntariosUncheckedCreateWithoutPessoasInput>
  }

  export type voluntariosUpdateWithoutPessoasInput = {
    disponibilidade?: Enumvoluntarios_disponibilidadeFieldUpdateOperationsInput | voluntarios_disponibilidade
    transporte?: Enumvoluntarios_transporteFieldUpdateOperationsInput | voluntarios_transporte
    funcao?: Enumvoluntarios_funcaoFieldUpdateOperationsInput | voluntarios_funcao
  }

  export type voluntariosUncheckedUpdateWithoutPessoasInput = {
    disponibilidade?: Enumvoluntarios_disponibilidadeFieldUpdateOperationsInput | voluntarios_disponibilidade
    transporte?: Enumvoluntarios_transporteFieldUpdateOperationsInput | voluntarios_transporte
    funcao?: Enumvoluntarios_funcaoFieldUpdateOperationsInput | voluntarios_funcao
  }

  export type pessoasCreateWithoutVoluntariosInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
    adotante?: adotanteCreateNestedOneWithoutPessoasInput
    endereco_pessoas?: endereco_pessoasCreateNestedOneWithoutPessoasInput
  }

  export type pessoasUncheckedCreateWithoutVoluntariosInput = {
    cpf: string
    nome: string
    email: string
    telefone: string
    adotante?: adotanteUncheckedCreateNestedOneWithoutPessoasInput
    endereco_pessoas?: endereco_pessoasUncheckedCreateNestedOneWithoutPessoasInput
  }

  export type pessoasCreateOrConnectWithoutVoluntariosInput = {
    where: pessoasWhereUniqueInput
    create: XOR<pessoasCreateWithoutVoluntariosInput, pessoasUncheckedCreateWithoutVoluntariosInput>
  }

  export type pessoasUpsertWithoutVoluntariosInput = {
    update: XOR<pessoasUpdateWithoutVoluntariosInput, pessoasUncheckedUpdateWithoutVoluntariosInput>
    create: XOR<pessoasCreateWithoutVoluntariosInput, pessoasUncheckedCreateWithoutVoluntariosInput>
  }

  export type pessoasUpdateWithoutVoluntariosInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    adotante?: adotanteUpdateOneWithoutPessoasNestedInput
    endereco_pessoas?: endereco_pessoasUpdateOneWithoutPessoasNestedInput
  }

  export type pessoasUncheckedUpdateWithoutVoluntariosInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    adotante?: adotanteUncheckedUpdateOneWithoutPessoasNestedInput
    endereco_pessoas?: endereco_pessoasUncheckedUpdateOneWithoutPessoasNestedInput
  }

  export type animaisCreateManyOngInput = {
    id_animal?: number
    especie: animais_especie
    sexo: animais_sexo
    porte: animais_porte
    idade: animais_idade
    pelagem: animais_pelagem
    cor: string
    deficiencia?: string | null
    vacinas: string
    descricao?: string | null
    foto: Buffer
  }

  export type animaisUpdateWithoutOngInput = {
    especie?: Enumanimais_especieFieldUpdateOperationsInput | animais_especie
    sexo?: Enumanimais_sexoFieldUpdateOperationsInput | animais_sexo
    porte?: Enumanimais_porteFieldUpdateOperationsInput | animais_porte
    idade?: Enumanimais_idadeFieldUpdateOperationsInput | animais_idade
    pelagem?: Enumanimais_pelagemFieldUpdateOperationsInput | animais_pelagem
    cor?: StringFieldUpdateOperationsInput | string
    deficiencia?: NullableStringFieldUpdateOperationsInput | string | null
    vacinas?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type animaisUncheckedUpdateWithoutOngInput = {
    id_animal?: IntFieldUpdateOperationsInput | number
    especie?: Enumanimais_especieFieldUpdateOperationsInput | animais_especie
    sexo?: Enumanimais_sexoFieldUpdateOperationsInput | animais_sexo
    porte?: Enumanimais_porteFieldUpdateOperationsInput | animais_porte
    idade?: Enumanimais_idadeFieldUpdateOperationsInput | animais_idade
    pelagem?: Enumanimais_pelagemFieldUpdateOperationsInput | animais_pelagem
    cor?: StringFieldUpdateOperationsInput | string
    deficiencia?: NullableStringFieldUpdateOperationsInput | string | null
    vacinas?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type animaisUncheckedUpdateManyWithoutAnimaisInput = {
    id_animal?: IntFieldUpdateOperationsInput | number
    especie?: Enumanimais_especieFieldUpdateOperationsInput | animais_especie
    sexo?: Enumanimais_sexoFieldUpdateOperationsInput | animais_sexo
    porte?: Enumanimais_porteFieldUpdateOperationsInput | animais_porte
    idade?: Enumanimais_idadeFieldUpdateOperationsInput | animais_idade
    pelagem?: Enumanimais_pelagemFieldUpdateOperationsInput | animais_pelagem
    cor?: StringFieldUpdateOperationsInput | string
    deficiencia?: NullableStringFieldUpdateOperationsInput | string | null
    vacinas?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: BytesFieldUpdateOperationsInput | Buffer
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}